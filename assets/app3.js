angular.module("app",["ui.ace","ngRoute","ngSanitize"]),angular.module("app").controller("ProbController",["$scope","$routeParams","$http","$sce","$timeout",function(e,t,n,r,s){e.problem=t.problem,e.showLastTestCase=!1,e.resultCodeOutput=!1,e.showWrongTestCase=!1,e.exhibit=!0,e.message="",e.flag=!0,e.statusColor="",e.preCode="console.log(Date.now());function Solution() {};function ListNode(val,) { this.val = val; this.next = undefined};importScript(//cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js)",e.postCode='\nfor (var i = 0; i < testCases.length; i++) {\n	var solution = new Solution();\n	var answer = solution.exist(testCases[i].input);console.log(testCases[i]);\n	if (answer != testCases[i].output) {\n		var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer};\n		self.postMessage(report);\n		self.close();\n		break;\n	}\n	}\nif (i==testCases.length){self.postMessage({status:"Accepted"})};',e.postCode2='\nself.addEventListener("message", function(e) {\nvar data = e.data;\nswitch (data.cmd) {\ncase "start":\nfor (var i = 0; i < data.testCases.length; i++) {\nvar solution = new Solution();\nvar answer = solution.exist(data.testCases[i].input);\nif (answer != data.testCases[i].output) {\nvar report = {status:"Incorrect Answer", should:output, wrongAnswer: answer}\nself.postMessage(report);\nself.close();\nbreak;\n}\n}\nif (i == data.testCases.length) {\nself.postMessage({status:"Accepted"});\nbreak;n}\ndefault:\nself.postMessage({status:"Unknown command"});\n};\n});',e.compare="Array.prototype.equals = function (array,order) {if (!array)return false;if (!(array instanceof Array)) return false;if (this.length != array.length)return false;if (order !== false) {for (var i = 0, l=this.length; i < l; i++) {if (this[i] instanceof Array && array[i] instanceof Array) {if (!this[i].equals(array[i]))return false;}else if (this[i] != array[i]) {return false;}}return true;}else {this.sort();array.sort();for (var i= 0, l = this.length; i<l; i++) {if (this[i] instanceof Array && array[i] instanceof Array) {if (!this[i].equals(array[i])) {return false;}}else if (this[i]!==array[i]) {return false;}}return true;}};",e.compare2="function ___compareArray___ (array1, array2) {if ((!array1) || (!array2))return false;if (array1.length != array2.length)return false;for (var i = 0, l=array1.length; i<l; i++) {if (array1[i] instanceof Array && array2[i] instanceof Array) {if (!compareArray(array1[i], array2[i]))return false;}else if (array1[i]!=array2[i]) {return false;}}return true;}",e.compare3="Number.prototype.equals = function (o) {var self = this.valueOf();return self == o;};",e.compare4="String.prototype.equals = function (o) {var self = this.valueOf();return self === o;};",e.compare5="Boolean.prototype.equals = function (o) {var self = this.valueOf();return self === o;};",e.compare6="Object.prototype.equals = function (o) {if (o === undefined || o === null) {return false;}else {if (this.val.equals(o.val)===false) {return false;}if (this.next!==undefined && this.next!== null) {return this.next.equals(o.next);}else {if (o.next!==undefined && o.next!== null) {return false;}else {return true;}}}};",e.compare7="Object.prototype.equals = function (o) {if (o === undefined || o === null) {return false;}var self = this;while (true) {if ((self===null || self===undefined) && (o===undefined || o===null))return true;if ((self===null || self===undefined) && (o!==undefined) && (o!==null))return false;if ((o===null || o===undefined) && (self!==undefined) && (self!==null))return false;if (self.val.equals(o.val)===false)return false;self = self.next; o = o.next;}};",Number.isInteger||(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&e>-9007199254740992&&9007199254740992>e&&Math.floor(e)===e}),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),n.get("/api/probs/"+e.problem,{cache:!0}).success(function(t){e.insertHtml=t.dis}),n.get("/api/problems/"+e.problem,{cache:!0}).success(function(t){console.log(t),e.aceInitial=t.snippet.slice(0,t.snippet.length),e.functionName=t.functionName,e.params=t.parameters,e.returnType=t.returnType,e.resultOrder=t.order,e.inPlace=t.inPlace,e.flag=!1}),e.aceLoaded=function(t){e.editorEmbed=t;t.getSession(),t.renderer;e.editorEmbed.setFontSize("16px"),t.setOptions({maxLines:1/0,minLines:30,highlightActiveLine:!1,autoScrollEditorIntoView:!0,showPrintMargin:!1})},e.renderHtml=function(e){return r.trustAsHtml(e)},e.codeSubmissionWithWebWorker2=function(){e.showLastTestCase=!1,e.resultCodeOutput=!1,e.showWrongTestCase=!1;var t="(",r="";if(void 0!=e.params){for(var a=0;a<e.params.length-1;a++)r+="testCases[i].input."+e.params[a]+",";r+="testCases[i].input."+e.params[a]}else r="testCases[i].input";t+=r+")",n.get("/api/tests/"+e.problem.toLowerCase()).success(function(n){console.log(n.content);var r=("\nfor (var i = 0; i < testCases.length; i++) {\n	var solution = new Solution();\n	var answer = solution."+e.functionName+t+';\n	if (testCases[i].output.equals(answer) == false) {\n		var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer};\n		self.postMessage(report);\n		self.close();\n		break;\n	}\n	}\nif (i==testCases.length){self.postMessage({status:"Accepted"})};',"\nfor (var i = 0; i < testCases.length; i++) {\n	var solution = new Solution();\n	var answer;\n	if ((testCases[i].input!==undefined) && (testCases[i].input!==null)){answer = solution."+e.functionName+t+";}\n	else {answer = solution."+e.functionName+'();}\n	if(testCases[i].output===undefined || testCases[i].output === null) {if ((answer!== undefined) && (answer !== null)){var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer, input: testCases[i].input}; self.postMessage(report); self.close(); break;} }\n	else if (testCases[i].output.equals(answer) == false) {\n		var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer, input: testCases[i].input, index:i};\n		self.postMessage(report);\n		self.close();\n		break;\n	}\n	}\nif (i==testCases.length){self.postMessage({status:"Accepted"})};'),a="console.log(Date.now());var testCases = "+JSON.stringify(n.content)+";function Solution() {};",o=a+";(function sandbox() { var self = undefined;var postMessage = undefined;"+e.aceInitial+"})()\n"+e.compare+e.compare3+e.compare4+e.compare5+e.compare6+r,i=new Blob([o]),u=window.URL.createObjectURL(i),l=!1,c=new Worker(u);s(function(){0==l&&(l=!0,e.message="Exceed Time Limit",e.statusColor="red",e.exhibit=!1,c.terminate(),window.URL.revokeObjectURL(u))},2e3),c.onmessage=function(t){console.log(t.data),"Incorrect Answer"==t.data.status&&0==l?(e.message=t.data.status,e.expected=t.data.should.toString(),e.lastOutput=t.data.wrongAnswer||"undefined",e.lastInput=JSON.stringify(t.data.input)||"undefined",e.showWrongTestCase=!0,l=!0,e.statusColor="red",e.exhibit=!1,c.terminate(),window.URL.revokeObjectURL(u)):"Accepted"==t.data.status&&0==l&&(l=!0,e.message=t.data.status,e.statusColor="green",e.exhibit=!1,c.terminate(),window.URL.revokeObjectURL(u)),e.$apply()},c.onerror=function(t){l=!0,e.resultCodeOutput=!0,console.log(t.message);var n=t.message.split(":");e.message=n[0],e.details=n[1],e.lineNumber=t.lineno,e.statusColor="red",window.URL.revokeObjectURL(u),e.exhibit=!1,e.$apply()}})},e.makeImmutable=function a(e){var t={};if(("object"==typeof e&&null!==e||(Array.isArray?Array.isArray(e):e instanceof Array)||"function"==typeof e)&&(Object.freeze(e),e.label&&!t.hasOwnProperty(e.label))){t[e.label]=e;for(var n in e)e.hasOwnProperty(n)&&a(e[n])}return e},e.makeImmutableText='function makeImmutable (obj) {var map = {};if ((typeof obj === "object" && obj !== null) ||(Array.isArray? Array.isArray(obj): obj instanceof Array) ||(typeof obj === "function")) {Object.freeze(obj);if (obj.label) {if (!map.hasOwnProperty(obj.label)) {map[obj.label] = obj;for (var key in obj) {if (obj.hasOwnProperty(key)) {makeImmutable(obj[key]);}}}}}return obj;}',e.codeSubmissionWithWebWorker3=function(){e.showLastTestCase=!1,e.resultCodeOutput=!1,e.showWrongTestCase=!1;var t="(",r="";if(void 0!=e.params){for(var a=0;a<e.params.length-1;a++)r+="testCases[i].input."+e.params[a].param+",";r+="testCases[i].input."+e.params[a].param}else r="testCases[i].input";if(t+=r+")",void 0===e.responseModified)n.get("/api/tests/"+e.problem.toLowerCase()).success(function(n){e.testCases=n.content.slice(0);for(var r={content:[]},a=0;a<n.content.length;a++){r.content[a]={};for(var o=0;o<e.params.length;o++)if("ListNode"==e.params[o].realType)"valueOf()"!=e.params[o].param?(void 0===r.content[a].input&&(r.content[a].input={}),r.content[a].input[e.params[o].param]=e.constructLinkedList(n.content[a].input[e.params[o].param])):r.content[a].input=e.constructLinkedList(n.content[a].input);else if("TreeNode"==e.params[o].realType)"valueOf()"!=e.params[o].param?(void 0===r.content[a].input&&(r.content[a].input={}),r.content[a].input[e.params[o].param]=e.constructBinaryTree(n.content[a].input[e.params[o].param])):r.content[a].input=e.constructBinaryTree(n.content[a].input);else if("UndirectedGraphNode"===e.params[o].realType)if("valueOf()"!==e.params[o].param){void 0===r.content[a].input&&(r.content[a].input={});var i=e.constructUndirectedGraph(n.content[a].input[e.params[o].param]);e.makeImmutable(i),Object.defineProperty(r.content[a].input,e.params[o].param,{value:i,writable:!1,enumerable:!0,configurable:!0})}else{var i=e.constructUndirectedGraph(n.content[a].input);e.makeImmutable(i),Object.defineProperty(r.content[a],"input",{value:i,writable:!1,enumerable:!0,configurable:!0})}else"valueOf()"!==e.params[o].param?(void 0===r.content[a].input&&(r.content[a].input={}),r.content[a].input[e.params[o].param]=n.content[a].input[e.params[o].param]):r.content[a].input=n.content[a].input;"ListNode"==e.returnType||"LinkedList"==e.returnType?r.content[a].output=e.constructLinkedList(n.content[a].output):"TreeNode"==e.returnType?(console.log(a),console.log("TreeHere"),console.log(n.content[a].output),r.content[a].output=e.constructBinaryTree(n.content[a].output),console.log(r.content[a].output),r.content[a].output=e.flattenedBinaryTree(r.content[a].output),console.log(r.content[a].output)):r.content[a].output=n.content[a].output}e.responseModified=r;var u='\nself.addEventListener("message", function(e) {\nvar data = e.data;\nvar testCases = data.testCases\nswitch (data.cmd) {\ncase "start":\nfor (var i = 0; i < testCases.length; i++) {\nvar solution = new Solution();\nvar answer;\nif (data.returnType === "UndirectedGraphNode") {makeImmutable(testCases[i].input);}\nif ((testCases[i].input!==undefined) && (testCases[i].input!==null)){answer = solution.'+e.functionName+t+";}\nelse {answer = solution."+e.functionName+'();}\nif (data.inPlace !== undefined) {answer = data.inPlace ==="valueOf()"?testCases[i].input: testCases[i].input[data.inPlace];}\nif (data.returnType == "Balanced BST") {var balanceFlag = isSelfBalancing (answer); if (balanceFlag === true ) {answer = inorderTraversal(answer);} else { answer = flattenedBinaryTree(answer); answer ="[" +answer +"] is not a self-balancing tree."} }\nif (data.returnType == "TreeNode") {answer = flattenedBinaryTree(answer);}\nif (data.returnType == "UndirectedGraphNode") {var check = compareTwoUndirectedGraph(testCases[i].input, answer);if (typeof check === "string"){answer = check;} else {answer = flattenUndirectedGraph(answer);} console.log(check);}\nif(testCases[i].output===undefined || testCases[i].output === null) {if ((answer!== undefined) && (answer !== null)){var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer, input: testCases[i].input, index:i}; self.postMessage(report); self.close(); break;} }\nelse if (testCases[i].output.equals(answer,data.order) == false) {\nvar report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer , input:testCases[i].input, index:i}\nself.postMessage(report);\nself.close();\nbreak;\n}\n}\nif (i == data.testCases.length) {\nself.postMessage({status:"Accepted"});\nbreak;\n}\ndefault:\nself.postMessage({status:"Unknown command"});\n};\n});',l='"use strict";function Solution () {};',c=l+";(function sandbox() { var self = undefined;var postMessage = undefined;"+e.aceInitial+"})()\n"+e.compare+e.compare3+e.compare4+e.compare5+e.compare6+e.flattenedBinaryTreeText+e.makeImmutableText+e.flattenUndirectedGraphText+e.compareTwoUndirectedGraphText+e.isBalancedBSTText+e.inorderTraversalText+u,p=new Blob([c]),f=window.URL.createObjectURL(p),d=!1,h=new Worker(f);h.onmessage=function(t){if("Incorrect Answer"==t.data.status&&0==d){d=!0,e.message=t.data.status,e.expected=JSON.stringify(e.testCases[t.data.index].output)||"undefined";try{e.lastOutput=JSON.stringify(t.data.wrongAnswer)||"undefined"}catch(t){e.lastOutput=t.message}e.lastInput=JSON.stringify(e.testCases[t.data.index].input)||"undefined",e.showWrongTestCase=!0,d=!0,e.statusColor="red",e.exhibit=!1,h.terminate(),window.URL.revokeObjectURL(f)}else"Accepted"==t.data.status&&0==d&&(d=!0,e.message=t.data.status,e.statusColor="green",e.exhibit=!1,h.terminate(),window.URL.revokeObjectURL(f));e.$apply()},h.onerror=function(t){d=!0,e.resultCodeOutput=!0,console.log(t.message);var n=t.message.split(":");e.message=n[0],e.details=n[1],e.lineNumber=t.lineno,e.statusColor="red",window.URL.revokeObjectURL(f),e.exhibit=!1,e.$apply()},h.postMessage({cmd:"start",testCases:e.responseModified.content,order:e.resultOrder,returnType:e.returnType,inPlace:e.inPlace}),s(function(){0==d&&(d=!0,e.message="Exceed Time Limit",e.statusColor="red",e.exhibit=!1,h.terminate(),window.URL.revokeObjectURL(f))},2e3)});else{var o=(e.responseModified,'\nself.addEventListener("message", function(e) {\nvar data = e.data;\nvar testCases = data.testCases\nswitch (data.cmd) {\ncase "start":\nfor (var i = 0; i < testCases.length; i++) {\nvar solution = new Solution();\nvar answer;\nif (data.returnType === "UndirectedGraphNode") {makeImmutable(testCases[i].input);}\nif ((testCases[i].input!==undefined) && (testCases[i].input!==null)){answer = solution.'+e.functionName+t+";}\nelse {answer = solution."+e.functionName+'();}\nif (data.inPlace !== undefined) {answer = data.inPlace ==="valueOf()"?testCases[i].input: testCases[i].input[data.inPlace];}\nif (data.returnType == "Balanced BST") {var balanceFlag = isSelfBalancing (answer); if (balanceFlag === true ) {answer = inorderTraversal(answer);} else { answer = flattenedBinaryTree(answer); answer ="[" +answer +"] is not a self-balancing tree."} }\nif (data.returnType == "TreeNode") {answer = flattenedBinaryTree(answer);}\nif (data.returnType == "UndirectedGraphNode") {var check = compareTwoUndirectedGraph(testCases[i].input, answer);if (typeof check === "string"){answer = check;} else {answer = flattenUndirectedGraph(answer);} console.log(check);}\nif(testCases[i].output===undefined || testCases[i].output === null) {if ((answer!== undefined) && (answer !== null)){var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer, input: testCases[i].input, index: i}; self.postMessage(report); self.close(); break;} }\nelse if (testCases[i].output.equals(answer,data.order) == false) {\nvar report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer , input:testCases[i].input, index: i}\nself.postMessage(report);\nself.close();\nbreak;\n}\n}\nif (i == data.testCases.length) {\nself.postMessage({status:"Accepted"});\nbreak;\n}\ndefault:\nself.postMessage({status:"Unknown command"});\n};\n});'),i='"use strict";function Solution () {};',u=i+";(function sandbox() { var self = undefined;var postMessage = undefined;"+e.aceInitial+"})()\n"+e.compare+e.compare3+e.compare4+e.compare5+e.compare6+e.flattenedBinaryTreeText+e.makeImmutableText+e.flattenUndirectedGraphText+e.compareTwoUndirectedGraphText+e.isBalancedBSTText+e.inorderTraversalText+o,l=new Blob([u]),c=window.URL.createObjectURL(l),p=!1,f=new Worker(c);f.onmessage=function(t){if("Incorrect Answer"==t.data.status&&0==p){p=!0,e.message=t.data.status,e.expected=JSON.stringify(e.testCases[t.data.index].output)||"undefined";try{e.lastOutput=JSON.stringify(t.data.wrongAnswer)||"undefined"}catch(t){e.lastOutput=t.message}e.lastInput=JSON.stringify(e.testCases[t.data.index].input)||"undefined",e.showWrongTestCase=!0,e.statusColor="red",e.exhibit=!1,f.terminate(),window.URL.revokeObjectURL(c)}else"Accepted"==t.data.status&&0==p&&(p=!0,e.message=t.data.status,e.statusColor="green",e.exhibit=!1,f.terminate(),window.URL.revokeObjectURL(c));e.$apply()},f.onerror=function(t){p=!0,e.resultCodeOutput=!0,console.log(t.message);var n=t.message.split(":");e.message=n[0],e.details=n[1],e.lineNumber=t.lineno,e.statusColor="red",f.terminate(),window.URL.revokeObjectURL(c),e.exhibit=!1,e.$apply()},f.postMessage({cmd:"start",testCases:e.responseModified.content,order:e.resultOrder,returnType:e.returnType,inPlace:e.inPlace}),s(function(){0==p&&(p=!0,e.message="Exceed Time Limit",e.statusColor="red",e.exhibit=!1,f.terminate(),window.URL.revokeObjectURL(c))},2e3)}},e.codeSubmissionWithWebWorker4=function(){var t="(",n="";if(void 0==e.params){for(var r=0;r<e.params.length-1;r++)n+="testCases[i].input."+e.params[r]+",";n+="testCases[i].input"+e.params[r]}else n="testCases[i].input";t+=n+")"},e.constructLinkedList=function(e){if(!Array.isArray(e))return e;for(var t=void 0,n=e.length-1;n>=0;n--){var r={val:e[n],next:t};t=r}return t},e.constructCycleList=function(e,t){if(!Array.isArray(e))return e;for(var n,r,s=void 0,a=e.length-1;a>=0;a--){var o={val:e[a],next:s};s=o,a===e.length-1&&(n=o),a===t&&(r=o)}return n.next=r,s},e.constructBinaryTree=function(e){if(void 0===e||!Array.isArray(e)||0===e.length||"#"===e[0])return void 0;var t=[],n={val:e[0]};t.push(n);for(var r=0;r<e.length&&t.length>0;){var s=t.shift();if(!(r+1<e.length))break;var a=e[++r];if("#"==a?a=void 0:(a={val:a},t.push(a),s.left=a),!(r+1<e.length))break;var o=e[++r];"#"==o?o=void 0:(o={val:o},t.push(o),s.right=o)}return n},e.flattenedBinaryTree=function(e){var t=[];if(void 0===e||null===e)return t;var n=[];for(n.push(e);n.length>0;){var r=n.shift();null!==r&&void 0!==r?(t.push(r.val),n.push(r.left),n.push(r.right)):t.push("#")}for(var s=t.length,a=t.length-1;a>=0&&"#"===t[a];a--)s=a;if(s<t.length){var o=t.length-s;t.splice(s,o)}return t},e.flattenedBinaryTreeText='; function flattenedBinaryTree(root) {var res = [];if (root === undefined || root === null)return res;var queue = [];queue.push(root);while (queue.length>0) {var cur = queue.shift();if ((cur !== null) && (cur!== undefined)) {res.push(cur.val);queue.push(cur.left);queue.push(cur.right);}else {res.push("#");}}var mark = res.length;for (var i = res.length-1; i>=0; i--) {if (res[i]!=="#") {break;}else {mark = i;}}if (mark<res.length) {var len = res.length - mark;res.splice(mark,len);}return res;};',e.testCaseStringify=function(){},e.constructUndirectedGraph=function(e){var t={};if(void 0===e||null===e||!Array.isArray(e)||0===e.length)return void 0;var n={label:e[0],neighbors:[]};t[e[0]]=n;for(var r=null,s=0;s<e.length;s++)if("#"===e[s])r=null;else{var a;t.hasOwnProperty(e[s])?a=t[e[s]]:(a={label:e[s],neighbors:[]},t[e[s]]=a),null===r?r=a:r!==a?(r.neighbors.push(a),a.neighbors.push(r)):r.neighbors.push(a)}return n},e.flattenUndirectedGraph=function(e){var t=[];if(null===e||void 0===e)return t;var n=[],r={},s=e;for(n.push(s);n.length>0;)if(s=n.shift(),Number.isInteger(s.label)&&!r.hasOwnProperty(s.label)&&(r[s.label]=s,Array.isArray(s.neighbors)))for(var a=0;a<s.neighbors.length;a++)n.push(s.neighbors[a]);var o=[];for(var i in r)r.hasOwnProperty(i)&&o.push(r[i]);o.sort(function(e,t){return e.label-t.label});for(var u=0;u<o.length;u++)if(0==u&&t.push(o[u].label),Array.isArray(o[u].neighbors)){for(var l=0,i=0;i<o[u].neighbors.length;i++)o[u].neighbors[i].label>=o[u].label&&(0===l&&u>0&&t.push(o[u].label),t.push(o[u].neighbors[i].label),l++);(l>0||0===u)&&t.push("#")}for(;t.length>0&&"#"===t[t.length-1];)t.pop();return t},e.flattenUndirectedGraphText='function flattenUndirectedGraph(graphNode) {var res = [];if (graphNode === null || graphNode === undefined){return res;}var queue = [];var map = {};var cur = graphNode;queue.push(cur);while (queue.length > 0) {cur = queue.shift();if (Number.isInteger(cur.label) && !map.hasOwnProperty(cur.label)) {map[cur.label] = cur;if (Array.isArray(cur.neighbors)) {for (var i = 0; i < cur.neighbors.length; i++) {queue.push(cur.neighbors[i]);}}}}var ordered = [];for (var k in map) {if (map.hasOwnProperty(k)) {ordered.push(map[k]);}}ordered.sort(function (a,b) {return a.label - b.label;});for (var j = 0; j < ordered.length; j++) {if (j==0){res.push(ordered[j].label);}if (Array.isArray(ordered[j].neighbors)) {var count = 0;for (var k =0; k < ordered[j].neighbors.length; k++) {if (ordered[j].neighbors[k].label >= ordered[j].label) {if(count === 0 && j>0){res.push(ordered[j].label);}res.push(ordered[j].neighbors[k].label);count++;}}if (count>0 || j===0){res.push("#");}}}while (res.length>0 && res[res.length-1]=== "#") {res.pop();}return res;};',e.compareGraph=function(){},e.compareTwoUndirectedGraph=function(e,t){if((void 0===e||null===e)&&void 0!==t&&null!==t)return!1;if(!(void 0!==e&&null!==e||void 0!==t&&null!==t))return!0;if(void 0!==e&&null!==e&&(void 0===t||null===t))return!1;if(e===t)return!1;var n=e,r=t,s={},a=[],o=[];for(a.push(n),o.push(r);a.length>0;){var n=a.shift(),r=o.shift();if(console.log(n),console.log(r),(void 0===n||null===n)&&void 0!==r&&null!==r)return!1;if(void 0!==n&&null!==n&&(void 0===r||null===r))return!1;if(n===r)return!1;if(void 0!==n&&null!==n||void 0!==r&&null!==r){if(n.label!==r.label)return!1;if(s.hasOwnProperty(n.label)){if(n.label!==r.label)return!1}else{if(s[n.label]=n,!Array.isArray(r.neighbors)||n.neighbors.length!==r.neighbors.length)return!1;n.neighbors.sort(orderNeighbors),r.neighbors.sort(orderNeighbors);for(var i=0;i<n.neighbors.length;i++)a.push(n.neighbors[i]),o.push(r.neighbors[i])}}else;}return!0},e.isBalancedBSTText="function maxDepth (root) {if (root === null || root === undefined)return 0;return 1+Math.max(maxDepth(root.left), maxDepth(root.right));}function minDepth (root) {if (root === null || root === undefined)return 0;return 1+Math.min(minDepth(root.left)+minDepth(root.right));}function isSelfBalancing (root) {return (maxDepth(root)-minDepth(root)<=1)}",e.inorderTraversalText="function inorderTraversal (root) {var res = [];if (root === null || root === undefined)return res;var stack = [];while ((root!==null && root!==undefined) || stack.length>0) {if (root!== null && root!==undefined) {stack.push(root);root = root.left;} else {root = stack.pop();res.push(root.val);root = root.right;}}return res;}",e.compareTwoUndirectedGraphText='function orderNeighbors(a,b) {return a.label- b.label;}function compareTwoUndirectedGraph (graphOne, graphTwo) {if ((graphOne === undefined || graphOne === null) && (graphTwo!==undefined && graphTwo!==null))return false;if ((graphOne === undefined || graphOne === null) && (graphTwo=== undefined || graphTwo === null))return true;if ((graphOne !== undefined && graphOne !== null) && (graphTwo===undefined || graphTwo===null ))return false;var curOne = graphOne;var curTwo = graphTwo;var map1 = {}, map2= {};var queue1 = [], queue2 = [];queue1.push(curOne);queue2.push(curTwo);while (queue1.length > 0) {var curOne = queue1.shift();var curTwo = queue2.shift();console.log(curOne);console.log(curTwo);if ((curOne === undefined || curOne === null) && (curTwo!==undefined && curTwo!==null))return false;console.log("p1");if ((curOne !== undefined && curOne !== null) && (curTwo===undefined || curTwo===null ))return false;console.log("p2");if (curOne == curTwo)return "Node with label "+ curOne.label + " was not copied but a reference to the original one.";console.log("win?");if ((curOne === undefined || curOne === null) && (curTwo=== undefined || curTwo === null)) {} else {console.log(curOne.label); console.log(curTwo.label);if (curOne.label!== curTwo.label)return false;console.log("p3");if (!map1.hasOwnProperty(curOne.label)) {map1[curOne.label] = curOne;if (!Array.isArray(curTwo.neighbors)|| curOne.neighbors.length !== curTwo.neighbors.length)return false;curOne.neighbors.sort(orderNeighbors);curTwo.neighbors.sort(orderNeighbors);for (var i = 0; i < curOne.neighbors.length; i++ ) {queue1.push(curOne.neighbors[i]);queue2.push(curTwo.neighbors[i]);}} else {if (curOne.label !== curTwo.label)return false;}}}console.log("pass");return true;};'}]),angular.module("app").controller("ApplicationCtrl",["$scope",function(e){e.$on("login",function(t,n){e.currentUser=n})}]),angular.module("app").service("CodeSvc",["$http",function(e){var t=this;console.log(e.defaults.headers.common["X-Auth"]),this.fetchSubmissions=function(){return e.get("api/submissions",{headers:{"X-Auth":t.token}})},this.create=function(t){return e.post("/api/submissions",t)}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,t){e.login=function(n,r){t.login(n,r).then(function(t){e.$emit("login",t)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(e,t){e.addPost=function(){e.postBody&&t.create({body:e.postBody}).success(function(t){e.posts.unshift(t),e.postBody=null})},t.fetch().success(function(t){e.posts=t})}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(t){return e.post("/api/posts",t)}}]),angular.module("app").controller("ProblemCtrl",["$scope","$routeParams","$http","$sce",function(e,t,n){e.problem=t.problem,e.preCode="function Solution() {};",e.postCode='\nfor (var i = 0; i < testCases.length; i++) {\n	var solution = new Solution();\n	var answer = solution.exist(testCases[i].input);console.log(testCases[i]);\n	if (answer != testCases[i].output) {\n		var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer};\n		self.postMessage(report);\n		self.close();\n		break;\n	}\n	}\nif (i==testCases.length){self.postMessage({status:"Accepted"})};',e.postCode2='\nself.addEventListener("message", function(e) {\nvar data = e.data;\nswitch (data.cmd) {\ncase "start":\nfor (var i = 0; i < data.testCases.length; i++) {\nvar solution = new Solution();\nvar answer = solution.exist(data.testCases[i].input);\nif (answer != data.testCases[i].output) {\nvar report = {status:"Incorrect Answer", should:output, wrongAnswer: answer}\nself.postMessage(report);\nself.close();\nbreak;\n}\n}\nif (i == data.testCases.length) {\nself.postMessage({status:"Accepted"});\nbreak;n}\ndefault:\nself.postMessage({status:"Unknown command"});\n};\n})',e.compare="Array.prototype.equals = function (array) {if (!array)return false;if (this.length != array.length)return false;for (var i = 0, l=this.length; i < l; i++) {if (this[i] instanceof Array && array[i] instanceof Array) {if (!this[i].equals(array[i]))return false;}else if (this[i] != array[i]) {return false;}}return true;}",e.compare2="function ___compareArray___ (array1, array2) {if ((!array1) || (!array2))return false;if (array1.length != array2.length)return false;for (var i = 0, l=array1.length; i<l; i++) {if (array1[i] instanceof Array && array2[i] instanceof Array) {if (!compareArray(array1[i], array2[i]))return false;}else if (array1[i]!=array2[i]) {return false;}}return true;}",e.___compareObjects___=function(){function e(t,n){var a;if(isNaN(t)&&isNaN(n)&&"number"==typeof t&&"number"==typeof n)return!0;if(t===n)return!0;if("function"==typeof t&&"function"==typeof n||t instanceof Date&&n instanceof Date||t instanceof RegExp&&n instanceof RegExp||t instanceof String&&n instanceof String||t instanceof Number&&n instanceof Number)return t.toString()===n.toString();if(t.isPrototypeOf(n)||n.isPrototypeOf(t))return!1;if(t.constructor!==n.constructor)return!1;if(t.prototype!==n.prototype)return!1;if(r.indexOf(t)>-1||s.indexOf(n)>-1)return!1;for(a in n){if(n.hasOwnProperty(a)!==t.hasOwnProperty(a))return!1;if(typeof n[a]!=typeof t[a])return!1}for(a in t){if(n.hasOwnProperty(a)!==t.hasOwnProperty(a))return!1;if(typeof n[a]!=typeof t[a])return!1;switch(typeof t[a]){case"object":case"function":if(r.push(t),s.push(n),!e(t[a],n[a]))return!1;r.pop(),s.pop();break;default:if(t[a]!==n[a])return!1}}return!0}var t,n,r,s;if(arguments.length<1)return!0;for(t=1,n=arguments.length;n>t;t++)if(r=[],s=[],!e(arguments[0],arguments[t]))return!1;return!0},e.flag=!0,e.aceLoaded=function(t){e.editorEmbed=t;t.getSession(),t.renderer;e.editorEmbed.setFontSize("16px")},n.get("/api/problems/"+e.problem).success(function(t){console.log(t),e.aceInitial=t.snippet.slice(0,t.snippet.length),e.functionName=t.functionName,e.params=t.parameters,e.flag=!1}),e.codeSubmission=function(){var t,n=document.getElementById("scriptContainer");n&&n.parentNode.removeChild(n),t=document.createElement("script"),t.id="scriptContainer",t.text=e.editorEmbed.getValue()+";console.log("+e.flag+")",document.getElementsByClassName("container")[0].appendChild(t)},e.pureCodeSubmission=function(){var t=e.aceInitial;CodeSvc.create(t)},e.codeSubmissionWithWebWorker=function(){n.get("/api/tests/"+e.problem.toLowerCase()).success(function(t){console.log(t.content);var n=(e.preCode,"var testCases = "+JSON.stringify(t.content)+";function Solution() {};"+e.aceInitial+e.postCode2);console.log(n);var r=new Blob([n]),s=window.URL.createObjectURL(r),a=new Worker(s);a.onmessage=function(e){console.log(e.data)},a.onerror=function(e){console.log(e.message)}})},e.codeSubmissionWithWebWorker2=function(){var t="(",r="";if(void 0!=e.params){for(var s=0;s<e.params.length-1;s++)r+="testCases[i].input."+e.params[s]+",";r+="testCases[i].input."+e.params[s]}else r="testCases[i].input";t+=r+")",n.get("/api/tests/"+e.problem.toLowerCase()).success(function(n){var r="\nfor (var i = 0; i < testCases.length; i++) {\n	var solution = new Solution();\n	var answer = solution."+e.functionName+t+';\n	if (answer.equals(testCases[i].output) == false) {\n		var report = {status:"Incorrect Answer", should:testCases[i].output, wrongAnswer: answer};\n		self.postMessage(report);\n		self.close();\n		break;\n	}\n	}\nif (i==testCases.length){self.postMessage({status:"Accepted"})};',s="var testCases = "+JSON.stringify(n.content)+";function Solution() {};",a=s+e.aceInitial+"\n"+e.compare+r,o=new Blob([a]),i=window.URL.createObjectURL(o),u=new Worker(i);u.onmessage=function(e){console.log(e.data)},u.onerror=function(e){console.log(e.message)}})},e.codeSubmissionWithWebWorker3=function(){var t="(",r="";if(void 0==e.params){for(var s=0;s<e.params.length-1;s++)r+="testCases[i].input."+e.params[s]+",";r+="testCases[i].input"+e.params[s]}else r="testCases[i].input";t+=r+")",n.get("/api/tests/"+e.problem.toLowerCase()).success(function(n){var r='\nself.addEventListener("message", function(e) {\nvar data = e.data;\nswitch (data.cmd) {\ncase "start":\nfor (var i = 0; i < data.testCases.length; i++) {\nvar solution = new Solution();\nvar answer = solution.'+e.functionName+t+';\nif (answer != data.testCases[i].output) {\nvar report = {status:"Incorrect Answer", should:output, wrongAnswer: answer}\nself.postMessage(report);\nself.close();\nbreak;\n}\n}\nif (i == data.testCases.length) {\nself.postMessage({status:"Accepted"});\nbreak;n}\ndefault:\nself.postMessage({status:"Unknown command"});\n};\n})',s=e.aceInitial+r,a=new Blob([s]),o=(window.URL.createObjectURL(a),new Worker(bloubURL));o.onmessage=function(){},o.onerror=function(){},o.postMessage({cmd:"start",testCases:n.content})})},e.extractFunction=function(){},e.unitTest=function(){},e.run=function(){},e.purify=function(){},e.constructLinkedList=function(e){for(var t=void 0,n=e.length-1;n>=0;n--){var r={val:e[n],next:t};t=r}return t},e.constructTree=function(e){for(var t=void 0,n=0;n<e.length;n++);return t}}]),angular.module("app").controller("ProblemsCtrl",["$scope","$http","$location","ProbsSvc",function(e,t,n,r){r.fetch().success(function(t){e.problems=t}),e.searchFlag=!1,e.wholeTable=!0,e.predicate="",e.reverse=!1,e.select=function(){if(""===e.searchKeywords)e.wholeTable=!0,e.searchFlag=!1;
else{var t=[];e.wholeTable=!1,e.searchFlag=!0;for(var n=0;n<e.problems.length;n++)-1!=e.problems[n].name.toLowerCase().indexOf(e.searchKeywords.toLowerCase())&&t.push(e.problems[n]);e.selected=t}},e.printOut=function(e){console.log(e)},e.getProblem=function(){n.path("/")},e.sortBy=function(t){e.predicate="difficulty"===t?e.difficultyRank:t,e.reverse=!e.reverse},e.difficultyRank=function(e){return"Hard"===e.difficulty?3:"Medium"===e.difficulty?2:1}}]),angular.module("app").service("ProbsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/problems")}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,t){e.availableFlag=!0,e.register=function(n,r){var s=t.register(n,r);s&&s.then(function(t){t===!0?e.availableFlag=!1:(e.availableFlag=!0,e.$emit("login",t))})}}]),angular.module("app").controller("resultCtrl",["$scope",function(){}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/problems",{controller:"ProblemsCtrl",templateUrl:"problems.html"}).when("/problems/:problem",{controller:"ProblemCtrl",templateUrl:function(e){return e.problem+".html"}}).when("/submissions",{controller:"SubmissionsController",templateUrl:"submissions.html"}).when("/probs/:problem",{controller:"ProbController",templateUrl:"problem.html"})}]),angular.module("app").controller("SubmissionController",["$scope",function(){}]),angular.module("app").controller("SubmissionHistoryController",["$scope","$routeParams",function(){}]),angular.module("app").controller("SubmissionsController",["$scope","$http",function(e,t){t.get("/api/submissions").success(function(t){e.submissions=t})}]),angular.module("app").service("SubmissionsSvc",["$http",function(e){this.getSubmissions=function(){e.get("/api/submissions")},this.addSubmission=function(t){e.post("/api/submissions",t)},this.getSubmissionHistory=function(t){e.post("/api/submissionhistory",t)},this.getSingleSubmission=function(t){e.post("/api/submissionDetail",t)}}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":t.token}})},t.login=function(n,r){return e.post("/api/sessions",{username:n,password:r}).then(function(n){return t.token=n.data,e.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(n,r){return e.post("/api/users",{username:n,password:r}).then(function(e){return"true"==e.data?(console.log("used"),!0):t.login(n,r)})}}]);
//# sourceMappingURL=data:application/json;base64,