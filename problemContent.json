{
    "/problems/maximum product subarray/": '\n              <p></p><p>\r\nFind the contiguous subarray within an array (containing at least one number) which has the largest product.\r\n</p>\r\n\r\n<p>\r\nFor example, given the array <code>[2,3,-2,4]</code>,<br>\r\nthe contiguous subarray <code>[2,3]</code> has the largest product = <code>6</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    "/problems/find minimum in rotated sorted array ii/": '\n              <p><blockquote>\r\n<p><i>Follow up</i> for &quot;Find Minimum in Rotated Sorted Array&quot;:<br>\r\nWhat if <i>duplicates</i> are allowed?</p>\r\n\r\n<p>Would this affect the run-time complexity? How and why?</p>\r\n</blockquote>\r\n\r\n</p><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\r\n\r\n<p>Find the minimum element.</p>\r\n\r\n<p>The array may contain duplicates.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/find minimum in rotated sorted array/': '\n              <p></p><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\r\n\r\n<p>Find the minimum element.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/reverse words in a string/': '\n              <p></p><p>\r\nGiven an input string, reverse the string word by word.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven s = &quot;<code>the sky is blue</code>&quot;,<br>\r\nreturn &quot;<code>blue is sky the</code>&quot;.\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show clarification.</a></p>\r\n\r\n<div class="spoilers"><b>Clarification:</b>\r\n\r\n<p>\r\n<ul>\r\n<li>What constitutes a word?<br>\r\nA sequence of non-space characters constitutes a word.</li>\r\n<li>Could the input string contain leading or trailing spaces?<br>\r\nYes. However, your reversed string should not contain leading or trailing spaces.</li>\r\n<li>How about multiple spaces between two words?<br>\r\nReduce them to a single space in the reversed string.</li>\r\n</ul>\r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/max points on a line/': '\n              <p></p><p>Given <i>n</i> points on a 2D plane, find the maximum number of points that lie on the same straight line.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/sort list/': '\n              <p></p><p>Sort a linked list in <i>O</i>(<i>n</i> log <i>n</i>) time using constant space complexity.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>\n                  \n                </span>\n              \n            ',
    "/problems/evaluate reverse polish notation/": '\n              <p></p><p>\r\nEvaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>.\r\n</p>\r\n\r\n<p>\r\nValid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.\r\n</p>\r\n\r\n<p>\r\nSome examples:<br>\r\n<pre>\r\n  [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9\r\n  [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/insertion sort list/': '\n              <p></p><p>Sort a linked list using insertion sort.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>\n                  \n                </span>\n              \n            ',
    '/problems/min stack/': '\n              <p></p><p>\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n<ul>\r\n<li>\r\npush(x) -- Push element x onto stack.\r\n</li>\r\n<li>\r\npop() -- Removes the element on top of the stack.\r\n</li>\r\n<li>\r\ntop() -- Get the top element.\r\n</li>\r\n<li>\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n</li>\r\n</ul>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/data-structure/">Data Structure</a>\n                  \n                </span>\n              \n            ',
    '/problems/lru cache/': '\n              <p></p><p>\r\nDesign and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>set</code>.\r\n</p>\r\n\r\n<p>\r\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\r\n<code>set(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/data-structure/">Data Structure</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree preorder traversal/': '\n              <p></p><p>Given a binary tree, return the <i>preorder</i> traversal of its nodes&apos; values.</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{1,#,2,3}</code>,<br>\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n</pre>\r\n</p>\r\n<p>\r\nreturn <code>[1,2,3]</code>.\r\n</p>\r\n\r\n<p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree postorder traversal/': '\n              <p></p><p>Given a binary tree, return the <i>postorder</i> traversal of its nodes&apos; values.</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{1,#,2,3}</code>,<br>\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n</pre>\r\n</p>\r\n<p>\r\nreturn <code>[3,2,1]</code>.\r\n</p>\r\n\r\n<p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/reorder list/': '\n              <p></p><p>\r\nGiven a singly linked list <i>L</i>: <i>L</i><sub>0</sub>&#x2192;<i>L</i><sub>1</sub>&#x2192;&#x2026;&#x2192;<i>L</i><sub><i>n</i>-1</sub>&#x2192;<i>L</i><sub>n</sub>,<br>\r\nreorder it to: <i>L</i><sub>0</sub>&#x2192;<i>L</i><sub><i>n</i></sub>&#x2192;<i>L</i><sub>1</sub>&#x2192;<i>L</i><sub><i>n</i>-1</sub>&#x2192;<i>L</i><sub>2</sub>&#x2192;<i>L</i><sub><i>n</i>-2</sub>&#x2192;&#x2026;\r\n</p>\r\n\r\n<p>You must do this in-place without altering the nodes&apos; values.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <code>{1,2,3,4}</code>, reorder it to <code>{1,4,2,3}</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/linked list cycle/': '\n              <p></p><p>\r\nGiven a linked list, determine if it has a cycle in it.\r\n</p>\r\n\r\n<p>\r\nFollow up:<br>\r\nCan you solve it without using extra space?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/linked list cycle ii/': '\n              <p></p><p>\r\nGiven a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.\r\n</p>\r\n\r\n<p>\r\nFollow up:<br>\r\nCan you solve it without using extra space?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/word break ii/': '\n              <p></p><p>\r\nGiven a string <i>s</i> and a dictionary of words <i>dict</i>, add spaces in <i>s</i> to construct a sentence where each word is a valid dictionary word.\r\n</p>\r\n\r\n<p>\r\nReturn all such possible sentences.\r\n</p>\r\n\r\n<p>\r\nFor example, given<br>\r\n<i>s</i> = <code>&quot;catsanddog&quot;</code>,<br>\r\n<i>dict</i> = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>.\r\n</p>\r\n\r\n<p>\r\nA solution is <code>[&quot;cats and dog&quot;, &quot;cat sand dog&quot;]</code>.\r\n</p>\r\n<p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/word break/': '\n              <p></p><p>\r\nGiven a string <i>s</i> and a dictionary of words <i>dict</i>, determine if <i>s</i> can be segmented into a space-separated sequence of one or more dictionary words.\r\n</p>\r\n\r\n<p>For example, given<br>\r\n<i>s</i> = <code>&quot;leetcode&quot;</code>,<br>\r\n<i>dict</i> = <code>[&quot;leet&quot;, &quot;code&quot;]</code>.\r\n</p>\r\n\r\n<p>\r\nReturn true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/copy list with random pointer/': '\n              <p></p><p>\r\nA linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.\r\n</p>\r\n\r\n<p>\r\nReturn a deep copy of the list.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/single number/': '\n              <p></p><p>Given an array of integers, every element appears <i>twice</i> except for one. Find that single one.</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/bit-manipulation/">Bit Manipulation</a>\n                  \n                </span>\n              \n            ',
    '/problems/single number ii/': '\n              <p></p><p>\r\nGiven an array of integers, every element appears <i>three</i> times except for one. Find that single one.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/bit-manipulation/">Bit Manipulation</a>\n                  \n                </span>\n              \n            ',
    '/problems/candy/': '\n              <p></p><p>\r\nThere are <i>N</i> children standing in a line. Each child is assigned a rating value. \r\n</p>\r\n<p>\r\nYou are giving candies to these children subjected to the following requirements:\r\n</p>\r\n<ul>\r\n<li>Each child must have at least one candy.</li>\r\n<li>Children with a higher rating get more candies than their neighbors.</li>\r\n</ul>\r\n<p>\r\nWhat is the minimum candies you must give?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                </span>\n              \n            ',
    '/problems/clone graph/': '\n              <p></p><p>\r\nClone an undirected graph. Each node in the graph contains a <code>label</code> and a list of its <code>neighbors</code>.\r\n</p>\r\n\r\n<div>\r\n<br>\r\n<b>OJ&apos;s undirected graph serialization:</b>\r\n\r\n<p>\r\nNodes are labeled uniquely.\r\n</p>\r\n\r\nWe use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.\r\n<p></p>\r\n\r\n\r\n<p>\r\nAs an example, consider the serialized graph <code><font color="red">{<font color="black">0</font>,1,2#</font><font color="blue"><font color="black">1</font>,2#</font><font color="green"><font color="black">2</font>,2}</font></code>.\r\n</p>\r\n\r\n<p>\r\nThe graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.\r\n<ol>\r\n<li>First node is labeled as <code><font color="black">0</font></code>. Connect node <code><font color="black">0</font></code> to both nodes <code><font color="red">1</font></code> and <code><font color="red">2</font></code>.</li>\r\n<li>Second node is labeled as <code><font color="black">1</font></code>. Connect node <code><font color="black">1</font></code> to node <code><font color="blue">2</font></code>.</li>\r\n<li>Third node is labeled as <code><font color="black">2</font></code>. Connect node <code><font color="black">2</font></code> to node <code><font color="green">2</font></code> (itself), thus forming a self-cycle.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nVisually, the graph looks like the following:\r\n<pre>\r\n       1\r\n      / \\\r\n     /   \\\r\n    0 --- 2\r\n         / \\\r\n         \\_/\r\n</pre>\r\n</p>\r\n\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/graph/">Graph</a>\n                  \n                </span>\n              \n            ',
    '/problems/palindrome partitioning ii/': '\n              <p></p><p>\r\nGiven a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\r\n</p>\r\n<p>\r\nReturn the minimum cuts needed for a palindrome partitioning of <i>s</i>.\r\n</p>\r\n<p>\r\nFor example, given <i>s</i> = <code>&quot;aab&quot;</code>,<br>\r\nReturn <code>1</code> since the palindrome partitioning <code>[&quot;aa&quot;,&quot;b&quot;]</code> could be produced using 1 cut.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/palindrome partitioning/': '\n              <p></p><p>\r\nGiven a string <i>s</i>, partition <i>s</i> such that every substring of the partition is a palindrome.\r\n</p>\r\n<p>\r\nReturn all possible palindrome partitioning of <i>s</i>.\r\n</p>\r\n<p>\r\nFor example, given <i>s</i> = <code>&quot;aab&quot;</code>,<br>\r\n\r\nReturn\r\n<pre>\r\n  [\r\n    [&quot;aa&quot;,&quot;b&quot;],\r\n    [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\r\n  ]\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/gas station/': '\n              <p></p><p>\r\nThere are <i>N</i> gas stations along a circular route, where the amount of gas at station <i>i</i> is <code>gas[i]</code>.\r\n</p>\r\n\r\n<p>\r\nYou have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <i>i</i> to its next station (<i>i</i>+1). You begin the journey with an empty tank at one of the gas stations.\r\n</p>\r\n\r\n<p>\r\nReturn the starting gas station&apos;s index if you can travel around the circuit once, otherwise return -1.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nThe solution is guaranteed to be unique.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                </span>\n              \n            ',
    '/problems/surrounded regions/': '\n              <p></p><p>\r\nGiven a 2D board containing <code>&apos;X&apos;</code> and <code>&apos;O&apos;</code>, capture all regions surrounded by <code>&apos;X&apos;</code>.</p>\r\n\r\n<p>A region is captured by flipping all <code>&apos;O&apos;</code>s into <code>&apos;X&apos;</code>s in that surrounded region.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<pre>\r\nX X X X\r\nX O O X\r\nX X O X\r\nX O X X\r\n</pre>\r\n</p>\r\n\r\n<p>\r\nAfter running your function, the board should be:\r\n<pre>\r\nX X X X\r\nX X X X\r\nX X X X\r\nX O X X\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/sum root to leaf numbers/': '\n              <p></p><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\r\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\r\n\r\n<p>Find the total sum of all root-to-leaf numbers.</p>\r\n\r\n<p>For example,\r\n<pre>\r\n    1\r\n   / \\\r\n  2   3\r\n</pre>\r\n</p>\r\n<p>\r\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br>\r\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\r\n</p>\r\n<p>\r\nReturn the sum = 12 + 13 = <code>25</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/longest consecutive sequence/': '\n              <p></p><p>\r\nGiven an unsorted array of integers, find the length of the longest consecutive elements sequence.\r\n</p>\r\n<p>\r\nFor example,<br>\r\nGiven <code>[100, 4, 200, 1, 3, 2]</code>,<br>\r\nThe longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Return its length: <code>4</code>.\r\n</p>\r\n<p>\r\nYour algorithm should run in O(<i>n</i>) complexity.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/word ladder/': '\n              <p></p><p>\r\nGiven two words (<i>start</i> and <i>end</i>), and a dictionary, find the length of shortest transformation sequence from <i>start</i> to <i>end</i>, such that:\r\n</p>\r\n<ol>\r\n<li>Only one letter can be changed at a time</li>\r\n<li>Each intermediate word must exist in the dictionary</li>\r\n</ol>\r\n\r\n<p>\r\nFor example,\r\n</p>\r\n<p>\r\nGiven:<br>\r\n<i>start</i> = <code>&quot;hit&quot;</code><br>\r\n<i>end</i> = <code>&quot;cog&quot;</code><br>\r\n<i>dict</i> = <code>[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</code><br>\r\n</p>\r\n<p>\r\nAs one shortest transformation is <code>&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;</code>,<br>\r\nreturn its length <code>5</code>.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\n<ul>\r\n<li>Return 0 if there is no such transformation sequence.</li>\r\n<li>All words have the same length.</li>\r\n<li>All words contain only lowercase alphabetic characters.</li>\r\n</ul>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/word ladder ii/': '\n              <p></p><p>\r\nGiven two words (<i>start</i> and <i>end</i>), and a dictionary, find all shortest transformation sequence(s) from <i>start</i> to <i>end</i>, such that:\r\n</p>\r\n<ol>\r\n<li>Only one letter can be changed at a time</li>\r\n<li>Each intermediate word must exist in the dictionary</li>\r\n</ol>\r\n\r\n<p>\r\nFor example,\r\n</p>\r\n<p>\r\nGiven:<br>\r\n<i>start</i> = <code>&quot;hit&quot;</code><br>\r\n<i>end</i> = <code>&quot;cog&quot;</code><br>\r\n<i>dict</i> = <code>[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</code><br>\r\n</p>\r\n<p>\r\nReturn<br>\r\n<pre>\r\n  [\r\n    [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\r\n    [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\r\n  ]\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\n<ul>\r\n<li>All words have the same length.</li>\r\n<li>All words contain only lowercase alphabetic characters.</li>\r\n</ul>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/valid palindrome/': '\n              <p></p><p>\r\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<code>&quot;A man, a plan, a canal: Panama&quot;</code> is a palindrome.<br>\r\n<code>&quot;race a car&quot;</code> is <i>not</i> a palindrome.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nHave you consider that the string might be empty? This is a good question to ask during an interview.</p>\r\n<p>\r\nFor the purpose of this problem, we define empty string as valid palindrome.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/best time to buy and sell stock iii/': '\n              <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete at most <i>two</i> transactions.</p>\r\n\r\n<p><b>Note:</b><br>\r\nYou may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree maximum path sum/': '\n              <p></p><p>\r\nGiven a binary tree, find the maximum path sum.\r\n</p>\r\n\r\n<p>\r\nThe path may start and end at any node in the tree.\r\n</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven the below binary tree,\r\n<pre>\r\n       1\r\n      / \\\r\n     2   3\r\n</pre>\r\n</p>\r\n<p>\r\nReturn <code>6</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/best time to buy and sell stock ii/': '\n              <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                </span>\n              \n            ',
    '/problems/triangle/': '\n              <p></p><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\r\n\r\n<p>\r\nFor example, given the following triangle<br>\r\n<pre>\r\n[\r\n     [<font color="red">2</font>],\r\n    [<font color="red">3</font>,4],\r\n   [6,<font color="red">5</font>,7],\r\n  [4,<font color="red">1</font>,8,3]\r\n]\r\n</pre>\r\n</p>\r\n<p>\r\nThe minimum path sum from top to bottom is <code>11</code> (i.e., <font color="red">2</font> + <font color="red">3</font> + <font color="red">5</font> + <font color="red">1</font> = 11).\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nBonus point if you are able to do this using only <i>O</i>(<i>n</i>) extra space, where <i>n</i> is the total number of rows in the triangle.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/best time to buy and sell stock/': '\n              <p></p><p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/pascals triangle/': '\n              <p></p><p>Given <i>numRows</i>, generate the first <i>numRows</i> of Pascal&apos;s triangle.</p>\r\n\r\n<p>\r\nFor example, given <i>numRows</i> = 5,<br>\r\nReturn\r\n<pre>\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/populating next right pointers in each node/': '\n              <p></p><p>\r\nGiven a binary tree\r\n<pre>\r\n    struct TreeLinkNode {\r\n      TreeLinkNode *left;\r\n      TreeLinkNode *right;\r\n      TreeLinkNode *next;\r\n    }\r\n</pre>\r\n</p>\r\n\r\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\r\n\r\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\r\n\r\n<p>\r\n<b>Note:</b>\r\n<ul>\r\n<li>You may only use constant extra space.</li>\r\n<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven the following perfect binary tree,<br>\r\n<pre>\r\n         1\r\n       /  \\\r\n      2    3\r\n     / \\  / \\\r\n    4  5  6  7\r\n</pre>\r\n</p>\r\n<p>\r\nAfter calling your function, the tree should look like:<br>\r\n<pre>\r\n         1 -&gt; NULL\r\n       /  \\\r\n      2 -&gt; 3 -&gt; NULL\r\n     / \\  / \\\r\n    4-&gt;5-&gt;6-&gt;7 -&gt; NULL\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/pascals triangle ii/': '\n              <p></p><p>Given an index <i>k</i>, return the <i>k</i><sup>th</sup> row of the Pascal&apos;s triangle.</p>\r\n\r\n<p>\r\nFor example, given <i>k</i> = 3,<br>\r\nReturn <code>[1,3,3,1]</code>.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nCould you optimize your algorithm to use only <i>O</i>(<i>k</i>) extra space?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/populating next right pointers in each node ii/': '\n              <p></p><p>Follow up for problem &quot;<i>Populating Next Right Pointers in Each Node</i>&quot;.</p>\r\n<p>What if the given tree could be any binary tree? Would your previous solution still work?</p>\r\n<p>\r\n<b>Note:</b>\r\n<ul><li>You may only use constant extra space.</li></ul>\r\n</p>\r\n<p>\r\nFor example,<br>\r\nGiven the following binary tree,<br>\r\n<pre>\r\n         1\r\n       /  \\\r\n      2    3\r\n     / \\    \\\r\n    4   5    7\r\n</pre>\r\n</p>\r\n<p>\r\nAfter calling your function, the tree should look like:<br>\r\n<pre>\r\n         1 -&gt; NULL\r\n       /  \\\r\n      2 -&gt; 3 -&gt; NULL\r\n     / \\    \\\r\n    4-&gt; 5 -&gt; 7 -&gt; NULL\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/distinct subsequences/': '\n              <p></p><p>\r\nGiven a string <b>S</b> and a string <b>T</b>, count the number of distinct subsequences of <b>T</b> in <b>S</b>.\r\n</p>\r\n\r\n<p>\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ACE&quot;</code> is a subsequence of <code>&quot;ABCDE&quot;</code> while <code>&quot;AEC&quot;</code> is not).\r\n</p>\r\n\r\n<p>\r\nHere is an example:<br>\r\n<b>S</b> = <code>&quot;rabbbit&quot;</code>, <b>T</b> = <code>&quot;rabbit&quot;</code>\r\n</p>\r\n<p>\r\nReturn <code>3</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/path sum ii/': '\n              <p></p><p>\r\nGiven a binary tree and a sum, find all root-to-leaf paths where each path&apos;s sum equals the given sum.\r\n</p>\r\n\r\nFor example:<br>\r\nGiven the below binary tree and <code>sum = 22</code>,\r\n<pre>\r\n              5\r\n             / \\\r\n            4   8\r\n           /   / \\\r\n          11  13  4\r\n         /  \\    / \\\r\n        7    2  5   1\r\n</pre>\r\n\r\n<p>\r\nreturn<br>\r\n<pre>\r\n[\r\n   [5,4,11,2],\r\n   [5,8,4,5]\r\n]\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/flatten binary tree to linked list/': '\n              <p></p><p>\r\nGiven a binary tree, flatten it to a linked list in-place.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven\r\n<pre>\r\n         1\r\n        / \\\r\n       2   5\r\n      / \\   \\\r\n     3   4   6\r\n</pre>\r\n</p>\r\n\r\nThe flattened tree should look like:<br>\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n      \\\r\n       3\r\n        \\\r\n         4\r\n          \\\r\n           5\r\n            \\\r\n             6\r\n</pre>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show hints.</a></p>\r\n\r\n<div class="spoilers"><b>Hints:</b>\r\n<p>If you notice carefully in the flattened tree, each node&apos;s right child points to the next node of a pre-order traversal.</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/minimum depth of binary tree/': '\n              <p></p><p>Given a binary tree, find its minimum depth.</p>\r\n\r\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/balanced binary tree/': '\n              <p></p><p>Given a binary tree, determine if it is height-balanced.\r\n</p>\r\n\r\n<p>\r\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <i>every</i> node never differ by more than 1.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/path sum/': '\n              <p></p><p>\r\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\r\n</p>\r\n\r\nFor example:<br>\r\nGiven the below binary tree and <code>sum = 22</code>,\r\n<pre>\r\n              5\r\n             / \\\r\n            4   8\r\n           /   / \\\r\n          11  13  4\r\n         /  \\      \\\r\n        7    2      1\r\n</pre>\r\n\r\n<p>\r\nreturn true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/convert sorted list to binary search tree/': '\n              <p></p><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/construct binary tree from inorder and postorder traversal/': '\n              <p></p><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p>\r\n\r\n<p><b>Note:</b><br>\r\nYou may assume that duplicates do not exist in the tree.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree level order traversal ii/': '\n              <p></p><p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes&apos; values. (ie, from left to right, level by level from leaf to root).</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{3,9,20,#,#,15,7}</code>,<br>\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its bottom-up level order traversal as:<br>\r\n<pre>\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]\r\n</pre>\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/convert sorted array to binary search tree/': '\n              <p></p><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/construct binary tree from preorder and inorder traversal/': '\n              <p></p><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>\r\n\r\n<p><b>Note:</b><br>\r\nYou may assume that duplicates do not exist in the tree.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/maximum depth of binary tree/': '\n              <p></p><p>Given a binary tree, find its maximum depth.</p>\r\n\r\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree zigzag level order traversal/': '\n              <p></p><p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes&apos; values. (ie, from left to right, then right to left for the next level and alternate between).</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{3,9,20,#,#,15,7}</code>,<br>\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its zigzag level order traversal as:<br>\r\n<pre>\r\n[\r\n  [3],\r\n  [20,9],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/symmetric tree/': '\n              <p></p><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\r\n\r\n<p>\r\nFor example, this binary tree is symmetric:\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n</pre>\r\n</p>\r\n<p>\r\nBut the following is not:<br>\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nBonus points if you could solve it both recursively and iteratively.\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/same tree/': '\n              <p></p><p>\r\nGiven two binary trees, write a function to check if they are equal or not.\r\n</p>\r\n\r\n<p>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree level order traversal/': '\n              <p></p><p>Given a binary tree, return the <i>level order</i> traversal of its nodes&apos; values. (ie, from left to right, level by level).</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{3,9,20,#,#,15,7}</code>,<br>\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its level order traversal as:<br>\r\n<pre>\r\n[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/breadth-first-search/">Breadth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/validate binary search tree/': '\n              <p></p><p>\r\nGiven a binary tree, determine if it is a valid binary search tree (BST).\r\n</p>\r\n\r\n<p>\r\nAssume a BST is defined as follows:\r\n<ul>\r\n<li>The left subtree of a node contains only nodes with keys <b>less than</b> the node&apos;s key.</li>\r\n<li>The right subtree of a node contains only nodes with keys <b>greater than</b> the node&apos;s key.</li>\r\n<li>Both the left and right subtrees must also be binary search trees.</li>\r\n</ul>\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/recover binary search tree/': '\n              <p></p><p>\r\nTwo elements of a binary search tree (BST) are swapped by mistake.</p>\r\n\r\n<p>Recover the tree without changing its structure.\r\n</p>\r\n\r\n<b>Note:</b><br>\r\nA solution using O(<i>n</i>) space is pretty straight forward. Could you devise a constant space solution?\r\n<p></p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/depth-first-search/">Depth-first Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/interleaving string/': '\n              <p></p><p>\r\nGiven <i>s1</i>, <i>s2</i>, <i>s3</i>, find whether <i>s3</i> is formed by the interleaving of <i>s1</i> and <i>s2</i>.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven:<br>\r\n<i>s1</i> = <code>&quot;aabcc&quot;</code>,<br>\r\n<i>s2</i> = <code>&quot;dbbca&quot;</code>,\r\n</p>\r\n<p>\r\nWhen <i>s3</i> = <code>&quot;aadbbcbcac&quot;</code>, return true.<br>\r\nWhen <i>s3</i> = <code>&quot;aadbbbaccc&quot;</code>, return false.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/unique binary search trees ii/': '\n              <p></p><p>Given <i>n</i>, generate all structurally unique <b>BST&apos;s</b> (binary search trees) that store values 1...<i>n</i>.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <i>n</i> = 3, your program should return all 5 unique BST&apos;s shown below.\r\n\r\n<pre>\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/binary tree inorder traversal/': '\n              <p></p><p>Given a binary tree, return the <i>inorder</i> traversal of its nodes&apos; values.</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven binary tree <code>{1,#,2,3}</code>,<br>\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n</pre>\r\n</p>\r\n<p>\r\nreturn <code>[1,3,2]</code>.\r\n</p>\r\n\r\n<p><b>Note:</b> Recursive solution is trivial, could you do it iteratively?</p>\r\n\r\n<p class="showspoilers">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class="spoilers"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/restore ip addresses/': '\n              <p></p><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven <code>&quot;25525511135&quot;</code>,\r\n</p>\r\n<p>\r\nreturn <code>[&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</code>. (Order does not matter)\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/unique binary search trees/': '\n              <p></p><p>Given <i>n</i>, how many structurally unique <b>BST&apos;s</b> (binary search trees) that store values 1...<i>n</i>?</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <i>n</i> = 3, there are a total of 5 unique BST&apos;s.\r\n\r\n<pre>\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/tree/">Tree</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/subsets ii/': '\n              <p></p><p>\r\nGiven a collection of integers that might contain duplicates, <i>S</i>, return all possible subsets.\r\n</p>\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>Elements in a subset must be in non-descending order.</li>\r\n<li>The solution set must not contain duplicate subsets.</li>\r\n</ul>\r\n</p>\r\n<p>\r\nFor example,<br>\r\nIf <b><i>S</i></b> = <code>[1,2,2]</code>, a solution is:\r\n</p>\r\n\r\n<pre>\r\n[\r\n  [2],\r\n  [1],\r\n  [1,2,2],\r\n  [2,2],\r\n  [1,2],\r\n  []\r\n]\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/reverse linked list ii/': '\n              <p></p><p>\r\nReverse a linked list from position <i>m</i> to <i>n</i>. Do it in-place and in one-pass.\r\n</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>, <i>m</i> = 2 and <i>n</i> = 4,\r\n</p>\r\n<p>\r\nreturn <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</code>.\r\n</p>\r\n<p>\r\n<b>Note:</b><br>\r\nGiven <i>m</i>, <i>n</i> satisfy the following condition:<br>\r\n1 &#x2264; <i>m</i> &#x2264; <i>n</i> &#x2264; length of list.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/decode ways/': '\n              <p></p><p>\r\nA message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:\r\n</p>\r\n\r\n<pre>\r\n&apos;A&apos; -&gt; 1\r\n&apos;B&apos; -&gt; 2\r\n...\r\n&apos;Z&apos; -&gt; 26\r\n</pre>\r\n\r\n<p>\r\nGiven an encoded message containing digits, determine the total number of ways to decode it.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven encoded message <code>&quot;12&quot;</code>,\r\nit could be decoded as <code>&quot;AB&quot;</code> (1 2) or <code>&quot;L&quot;</code> (12).\r\n</p>\r\n\r\n<p>\r\nThe number of ways decoding <code>&quot;12&quot;</code> is 2.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/gray code/': '\n              <p></p><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\r\n\r\n<p>Given a non-negative integer <i>n</i> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\r\n\r\n<p>For example, given <i>n</i> = 2, return <code>[0,1,3,2]</code>. Its gray code sequence is:</p>\r\n<pre>\r\n00 - 0\r\n01 - 1\r\n11 - 3\r\n10 - 2\r\n</pre>\r\n\r\n<p><b>Note:</b><br>\r\nFor a given <i>n</i>, a gray code sequence is not uniquely defined.\r\n</p>\r\n<p>For example, <code>[0,2,3,1]</code> is also a valid gray code sequence according to the above definition.</p>\r\n\r\n<p>For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/merge sorted array/': '\n              <p></p><p>Given two sorted integer arrays A and B, merge B into A as one sorted array.</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nYou may assume that A has enough space (size that is greater or equal to <i>m</i> + <i>n</i>) to hold additional elements from B. The number of elements initialized in A and B are <i>m</i> and <i>n</i> respectively.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/scramble string/': '\n              <p></p><p>\r\nGiven a string <i>s1</i>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\r\n</p>\r\n<p>\r\nBelow is one possible representation of <i>s1</i> = <code>&quot;great&quot;</code>:\r\n</p>\r\n<pre>\r\n    great\r\n   /    \\\r\n  gr    eat\r\n / \\    /  \\\r\ng   r  e   at\r\n           / \\\r\n          a   t\r\n</pre>\r\n<p>\r\nTo scramble the string, we may choose any non-leaf node and swap its two children.\r\n</p>\r\n<p>\r\nFor example, if we choose the node <code>&quot;gr&quot;</code> and swap its two children, it produces a scrambled string <code>&quot;rgeat&quot;</code>.\r\n</p>\r\n<pre>\r\n    rgeat\r\n   /    \\\r\n  rg    eat\r\n / \\    /  \\\r\nr   g  e   at\r\n           / \\\r\n          a   t\r\n</pre>\r\n<p>\r\nWe say that <code>&quot;rgeat&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.\r\n</p>\r\n<p>\r\nSimilarly, if we continue to swap the children of nodes <code>&quot;eat&quot;</code> and <code>&quot;at&quot;</code>, it produces a scrambled string <code>&quot;rgtae&quot;</code>.\r\n</p>\r\n<pre>\r\n    rgtae\r\n   /    \\\r\n  rg    tae\r\n / \\    /  \\\r\nr   g  ta  e\r\n       / \\\r\n      t   a\r\n</pre>\r\n<p>\r\nWe say that <code>&quot;rgtae&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.\r\n</p>\r\n<p>\r\nGiven two strings <i>s1</i> and <i>s2</i> of the same length, determine if <i>s2</i> is a scrambled string of <i>s1</i>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/maximal rectangle/': '\n              <p></p><p>\r\nGiven a 2D binary matrix filled with 0&apos;s and 1&apos;s, find the largest rectangle containing all ones and return its area.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/partition list/': '\n              <p></p><p>Given a linked list and a value <i>x</i>, partition it such that all nodes less than <i>x</i> come before nodes greater than or equal to <i>x</i>.\r\n</p>\r\n<p>\r\nYou should preserve the original relative order of the nodes in each of the two partitions.\r\n</p>\r\n<p>\r\nFor example,<br>\r\nGiven <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2</code> and <i>x</i> = 3,<br>\r\nreturn <code>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/largest rectangle in histogram/': '\n              <p></p><p>\r\nGiven <i>n</i> non-negative integers representing the histogram&apos;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\r\n</p>\r\n\r\n<p>\r\n<img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram.png"><br>\r\n</p><p style="font-size: 11px">Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</p>\r\n<p></p>\r\n\r\n<p>\r\n<img src="http://www.leetcode.com/wp-content/uploads/2012/04/histogram_area.png"><br>\r\n</p><p style="font-size: 11px">The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</p>\r\n<p></p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven height = <code>[2,1,5,6,2,3]</code>,<br>\r\nreturn <code>10</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                </span>\n              \n            ',
    '/problems/search in rotated sorted array ii/': '\n              <p></p><p>Follow up for &quot;Search in Rotated Sorted Array&quot;:<br>\r\nWhat if <i>duplicates</i> are allowed?</p>\r\n\r\n<p>Would this affect the run-time complexity? How and why?</p>\r\n\r\n<p>Write a function to determine if a given target is in the array.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove duplicates from sorted list ii/': '\n              <p></p><p>\r\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only <i>distinct</i> numbers from the original list.\r\n</p>\r\n<p>\r\nFor example,<br>\r\nGiven <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br>\r\nGiven <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove duplicates from sorted list/': '\n              <p></p><p>\r\nGiven a sorted linked list, delete all duplicates such that each element appear only <i>once</i>.\r\n</p>\r\n<p>\r\nFor example,<br>\r\nGiven <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>\r\nGiven <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove duplicates from sorted array ii/': '\n              <p></p><p>\r\nFollow up for &quot;Remove Duplicates&quot;:<br>\r\nWhat if duplicates are allowed at most <i>twice</i>?</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven sorted array A = <code>[1,1,1,2,2,3]</code>,\r\n</p>\r\n<p>\r\nYour function should return length = <code>5</code>, and A is now <code>[1,1,2,2,3]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/subsets/': '\n              <p></p><p>\r\nGiven a set of distinct integers, <i>S</i>, return all possible subsets.\r\n</p>\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>Elements in a subset must be in non-descending order.</li>\r\n<li>The solution set must not contain duplicate subsets.</li>\r\n</ul>\r\n</p>\r\n<p>\r\nFor example,<br>\r\nIf <b><i>S</i></b> = <code>[1,2,3]</code>, a solution is:\r\n</p>\r\n\r\n<pre>\r\n[\r\n  [3],\r\n  [1],\r\n  [2],\r\n  [1,2,3],\r\n  [1,3],\r\n  [2,3],\r\n  [1,2],\r\n  []\r\n]\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/bit-manipulation/">Bit Manipulation</a>\n                  \n                </span>\n              \n            ',
    '/problems/word search/': '\n              <p></p><p>\r\nGiven a 2D board and a word, find if the word exists in the grid.\r\n</p>\r\n<p>\r\nThe word can be constructed from letters of sequentially adjacent cell, where &quot;adjacent&quot; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <b>board</b> = \r\n<pre>\r\n[\r\n  [&quot;ABCE&quot;],\r\n  [&quot;SFCS&quot;],\r\n  [&quot;ADEE&quot;]\r\n]\r\n</pre>\r\n\r\n<b>word</b> = <code>&quot;ABCCED&quot;</code>, -&gt; returns <code>true</code>,<br>\r\n<b>word</b> = <code>&quot;SEE&quot;</code>, -&gt; returns <code>true</code>,<br>\r\n<b>word</b> = <code>&quot;ABCB&quot;</code>, -&gt; returns <code>false</code>.<br>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/minimum window substring/': '\n              <p></p><p>\r\nGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<b>S</b> = <code>&quot;ADOBECODEBANC&quot;</code><br>\r\n<b>T</b> = <code>&quot;ABC&quot;</code><br>\r\n</p>\r\n<p>\r\nMinimum window is <code>&quot;BANC&quot;</code>.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nIf there is no such window in S that covers all characters in T, return the emtpy string <code>&quot;&quot;</code>.\r\n</p>\r\n<p>\r\nIf there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/combinations/': '\n              <p></p><p>\r\nGiven two integers <i>n</i> and <i>k</i>, return all possible combinations of <i>k</i> numbers out of 1 ... <i>n</i>.\r\n</p>\r\n<p>\r\nFor example,<br>\r\nIf <i>n</i> = 4 and <i>k</i> = 2, a solution is:\r\n</p>\r\n\r\n<pre>\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/sort colors/': '\n              <p></p><p>\r\nGiven an array with <i>n</i> objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.\r\n</p>\r\n\r\n<p>\r\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nYou are not suppose to use the library&apos;s sort function for this problem.\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show follow up.</a></p>\r\n\r\n<div class="spoilers">\r\n<p><b>Follow up:</b><br>\r\nA rather straight forward solution is a two-pass algorithm using counting sort.<br>\r\nFirst, iterate the array counting number of 0&apos;s, 1&apos;s, and 2&apos;s, then overwrite array with total number of 0&apos;s, then 1&apos;s and followed by 2&apos;s.</p>\r\n<p>Could you come up with an one-pass algorithm using only constant space?<br>\r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>\n                  \n                </span>\n              \n            ',
    '/problems/search a 2d matrix/': '\n              <p></p><p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p>\r\n\r\n<p>\r\n<ul>\r\n<li>Integers in each row are sorted from left to right.</li>\r\n<li>The first integer of each row is greater than the last integer of the previous row.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nFor example,</p>\r\n<p>\r\nConsider the following matrix:\r\n</p>\r\n<pre>\r\n[\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\n</pre>\r\n\r\n<p>Given <b>target</b> = <code>3</code>, return <code>true</code>.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/set matrix zeroes/': '\n              <p></p><p>\r\nGiven a <i>m</i> x <i>n</i> matrix, if an element is 0, set its entire row and column to 0. Do it in place.\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show follow up.</a></p>\r\n\r\n<div class="spoilers"><b>Follow up:</b>\r\n\r\n<p>\r\nDid you use extra space?<br>\r\nA straight forward solution using O(<i>m</i><i>n</i>) space is probably a bad idea.<br>\r\nA simple improvement uses O(<i>m</i> + <i>n</i>) space, but still not the best solution.<br>\r\nCould you devise a constant space solution?\r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/edit distance/': '\n              <p></p><p>\r\nGiven two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to convert <i>word1</i> to <i>word2</i>. (each operation is counted as 1 step.)\r\n</p>\r\n\r\n<p>\r\nYou have the following 3 operations permitted on a word:\r\n</p>\r\n\r\n<p>\r\na) Insert a character<br>\r\nb) Delete a character<br>\r\nc) Replace a character<br>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/climbing stairs/': '\n              <p></p><p>You are climbing a stair case. It takes <i>n</i> steps to reach to the top.</p>\r\n\r\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/sqrtx/': '\n              <p></p><p>Implement <code>int sqrt(int x)</code>.</p>\r\n\r\n<p>Compute and return the square root of <i>x</i>.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/simplify path/': '\n              <p></p><p>Given an absolute path for a file (Unix-style), simplify it.</p>\r\n\r\n<p>For example,<br>\r\n<b>path</b> = <code>&quot;/home/&quot;</code>, =&gt; <code>&quot;/home&quot;</code><br>\r\n<b>path</b> = <code>&quot;/a/./b/../../c/&quot;</code>, =&gt; <code>&quot;/c&quot;</code><br>\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show corner cases.</a></p>\r\n\r\n<div class="spoilers"><b>Corner Cases:</b>\r\n\r\n<p>\r\n<ul>\r\n<li>Did you consider the case where <b>path</b> = <code>&quot;/../&quot;</code>?<br>\r\nIn this case, you should return <code>&quot;/&quot;</code>.</li>\r\n<li>Another corner case is the path might contain multiple slashes <code>&apos;/&apos;</code> together, such as <code>&quot;/home//foo/&quot;</code>.<br>\r\nIn this case, you should ignore redundant slashes and return <code>&quot;/home/foo&quot;</code>.</li>\r\n</ul></p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/text justification/': '\n              <p></p><p>\r\nGiven an array of words and a length <i>L</i>, format the text such that each line has exactly <i>L</i> characters and is fully (left and right) justified.\r\n</p> \r\n\r\n<p>\r\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&apos; &apos;</code> when necessary so that each line has exactly <i>L</i> characters.\r\n</p>\r\n\r\n<p>\r\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\r\n</p>\r\n\r\n<p>\r\nFor the last line of text, it should be left justified and no extra space is inserted between words.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<b>words</b>: <code>[&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]</code><br>\r\n<b>L</b>: <code>16</code>.\r\n</p>\r\n\r\n<p>\r\nReturn the formatted lines as:<br>\r\n<pre>\r\n[\r\n   &quot;This    is    an&quot;,\r\n   &quot;example  of text&quot;,\r\n   &quot;justification.  &quot;\r\n]\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b> Each word is guaranteed not to exceed <i>L</i> in length.\r\n</p>\r\n\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show corner cases.</a></p>\r\n\r\n<div class="spoilers"><b>Corner Cases:</b>\r\n<p>\r\n<ul>\r\n<li>A line other than the last line might contain only one word. What should you do in this case?<br>\r\nIn this case, that line should be left-justified.</li>\r\n</ul></p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/valid number/': '\n              <p></p><p>Validate if a given string is numeric.</p>\r\n\r\n<p>\r\nSome examples:<br>\r\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br>\r\n<code>&quot;   0.1  &quot;</code> =&gt; <code>true</code><br>\r\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br>\r\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br>\r\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code><br>\r\n</p>\r\n\r\n<p><b>Note:</b> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/plus one/': '\n              <p></p><p>Given a non-negative number represented as an array of digits, plus one to the number.</p>\r\n\r\n<p>The digits are stored such that the most significant digit is at the head of the list.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/add binary/': '\n              <p></p><p>\r\nGiven two binary strings, return their sum (also a binary string).\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\na = <code>&quot;11&quot;</code><br>\r\nb = <code>&quot;1&quot;</code><br>\r\nReturn <code>&quot;100&quot;</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/merge two sorted lists/': '\n              <p></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/minimum path sum/': '\n              <p></p><p>Given a <i>m</i> x <i>n</i> grid filled with non-negative numbers, find a path from top left to bottom right which <i>minimizes</i> the sum of all numbers along its path.</p>\r\n\r\n<p><b>Note:</b> You can only move either down or right at any point in time.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/unique paths ii/': '\n              <p></p><p>Follow up for &quot;Unique Paths&quot;:</p>\r\n\r\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\r\n\r\n<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>\r\n\r\n<p>For example,<br>\r\n</p><p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>\r\n<pre>\r\n[\r\n  [0,0,0],\r\n  [0,1,0],\r\n  [0,0,0]\r\n]\r\n</pre>\r\n<p>The total number of unique paths is <code>2</code>.</p>\r\n\r\n<p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/permutation sequence/': '\n              <p></p><p>The set <code>[1,2,3,&#x2026;,<i>n</i>]</code> contains a total of <i>n</i>! unique permutations.</p>\r\n\r\n<p>By listing and labeling all of the permutations in order,<br>\r\nWe get the following sequence (ie, for <i>n</i> = 3):\r\n<ol>\r\n<li><code>&quot;123&quot;</code></li>\r\n<li><code>&quot;132&quot;</code></li>\r\n<li><code>&quot;213&quot;</code></li>\r\n<li><code>&quot;231&quot;</code></li>\r\n<li><code>&quot;312&quot;</code></li>\r\n<li><code>&quot;321&quot;</code></li>\r\n</ol>\r\n</p>\r\n\r\n<p>Given <i>n</i> and <i>k</i>, return the <i>k</i><sup>th</sup> permutation sequence.</p>\r\n\r\n<p><b>Note:</b> Given <i>n</i> will be between 1 and 9 inclusive.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/rotate list/': '\n              <p></p><p>Given a list, rotate the list to the right by <i>k</i> places, where <i>k</i> is non-negative.</p>\r\n\r\n<p>For example:<br>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> and <i>k</i> = <code>2</code>,<br>\r\nreturn <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code>.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/spiral matrix ii/': '\n              <p></p><p>Given an integer <i>n</i>, generate a square matrix filled with elements from 1 to <i>n</i><sup>2</sup> in spiral order.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <i>n</i> = <code>3</code>,\r\n</p>\r\nYou should return the following matrix:\r\n<pre>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 8, 9, 4 ],\r\n [ 7, 6, 5 ]\r\n]\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/unique paths/': '\n              <p></p><p>A robot is located at the top-left corner of a <i>m</i> x <i>n</i> grid (marked &apos;Start&apos; in the diagram below).</p>\r\n\r\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &apos;Finish&apos; in the diagram below).</p>\r\n\r\n<p>How many possible unique paths are there?</p>\r\n\r\n<p>\r\n<img src="http://4.bp.blogspot.com/_UElib2WLeDE/TNJf8VtC2VI/AAAAAAAACXU/UyUa-9LKp4E/s400/robot_maze.png"><br>\r\n</p><p style="font-size: 11px">Above is a 3 x 7 grid. How many possible unique paths are there?\r\n</p>\r\n\r\n<p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/length of last word/': '\n              <p></p><p>Given a string <i>s</i> consists of upper/lower-case alphabets and empty space characters <code>&apos; &apos;</code>, return the length of last word in the string.</p>\r\n\r\n<p>If the last word does not exist, return 0.</p>\r\n\r\n<p><b>Note:</b> A word is defined as a character sequence consists of non-space characters only.</p>\r\n\r\n<p>\r\nFor example, <br>\r\nGiven <i>s</i> = <code>&quot;Hello World&quot;</code>,<br>\r\nreturn <code>5</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/insert interval/': '\n              <p></p><p>Given a set of <i>non-overlapping</i> intervals, insert a new interval into the intervals (merge if necessary).</p>\r\n\r\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\r\n\r\n<p>\r\n<b>Example 1:</b><br>\r\nGiven intervals <code>[1,3],[6,9]</code>, insert and merge <code>[2,5]</code> in as <code>[1,5],[6,9]</code>.\r\n</p>\r\n\r\n<p>\r\n<b>Example 2:</b><br>\r\nGiven <code>[1,2],[3,5],[6,7],[8,10],[12,16]</code>, insert and merge <code>[4,9]</code> in as <code>[1,2],[3,10],[12,16]</code>.\r\n</p>\r\n\r\n<p>\r\nThis is because the new interval <code>[4,9]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>\n                  \n                </span>\n              \n            ',
    '/problems/jump game/': '\n              <p></p><p>\r\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\r\n</p>\r\n<p>\r\nEach element in the array represents your maximum jump length at that position. \r\n</p>\r\n<p>\r\nDetermine if you are able to reach the last index.\r\n</p>\r\n\r\n<p>\r\nFor example:<br>\r\nA = <code>[2,3,1,1,4]</code>, return <code>true</code>.\r\n</p>\r\n<p>\r\nA = <code>[3,2,1,0,4]</code>, return <code>false</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                </span>\n              \n            ',
    '/problems/merge intervals/': '\n              <p></p><p>Given a collection of intervals, merge all overlapping intervals.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <code>[1,3],[2,6],[8,10],[15,18]</code>,<br>\r\nreturn <code>[1,6],[8,10],[15,18]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/sort/">Sort</a>\n                  \n                </span>\n              \n            ',
    '/problems/maximum subarray/': '\n              <p></p><p>\r\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\r\n</p>\r\n<p>\r\nFor example, given the array <code>[&#x2212;2,1,&#x2212;3,4,&#x2212;1,2,1,&#x2212;5,4]</code>,<br>\r\nthe contiguous subarray <code>[4,&#x2212;1,2,1]</code> has the largest sum = <code>6</code>.\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show more practice.</a></p>\r\n\r\n<div class="spoilers"><b>More practice:</b>\r\n\r\n<p>If you have figured out the O(<i>n</i>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/divide-and-conquer/">Divide and Conquer</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                </span>\n              \n            ',
    '/problems/spiral matrix/': '\n              <p></p><p>Given a matrix of <i>m</i> x <i>n</i> elements (<i>m</i> rows, <i>n</i> columns), return all elements of the matrix in spiral order.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven the following matrix:\r\n</p>\r\n<pre>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n</pre>\r\n<p>\r\nYou should return <code>[1,2,3,6,9,8,7,4,5]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/n queens ii/': '\n              <p></p><p>Follow up for N-Queens problem.</p>\r\n\r\n<p>Now, instead outputting board configurations, return the total number of distinct solutions.</p>\r\n\r\n<p><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png"></p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/n queens/': '\n              <p></p><p>The <i>n</i>-queens puzzle is the problem of placing <i>n</i> queens on an <i>n</i>&#xD7;<i>n</i> chessboard such that no two queens attack each other.</p>\r\n\r\n<p><img src="http://www.leetcode.com/wp-content/uploads/2012/03/8-queens.png"></p>\r\n\r\n<p>Given an integer <i>n</i>, return all distinct solutions to the <i>n</i>-queens puzzle.</p>\r\n\r\n<p>Each solution contains a distinct board configuration of the <i>n</i>-queens&apos; placement, where <code>&apos;Q&apos;</code> and <code>&apos;.&apos;</code> both indicate a queen and an empty space respectively.</p>\r\n\r\n<p>For example,<br>\r\nThere exist two distinct solutions to the 4-queens puzzle:</p>\r\n<pre>\r\n[\r\n [&quot;.Q..&quot;,  // Solution 1\r\n  &quot;...Q&quot;,\r\n  &quot;Q...&quot;,\r\n  &quot;..Q.&quot;],\r\n\r\n [&quot;..Q.&quot;,  // Solution 2\r\n  &quot;Q...&quot;,\r\n  &quot;...Q&quot;,\r\n  &quot;.Q..&quot;]\r\n]\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/powx n/': '\n              <p></p><p>Implement pow(<i>x</i>, <i>n</i>).\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/jump game ii/': '\n              <p></p><p>\r\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\r\n</p>\r\n<p>\r\nEach element in the array represents your maximum jump length at that position. \r\n</p>\r\n<p>\r\nYour goal is to reach the last index in the minimum number of jumps.\r\n</p>\r\n\r\n<p>\r\nFor example:<br>\r\nGiven array A = <code>[2,3,1,1,4]</code>\r\n</p>\r\n<p>\r\nThe minimum number of jumps to reach the last index is <code>2</code>. (Jump <code>1</code> step from index 0 to 1, then <code>3</code> steps to the last index.)\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                </span>\n              \n            ',
    '/problems/anagrams/': '\n              <p></p><p>Given an array of strings, return all groups of strings that are anagrams.\r\n</p>\r\n\r\n<p>Note: All inputs will be in lower-case.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/permutations ii/': '\n              <p></p><p>\r\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<code>[1,1,2]</code> have the following unique permutations:<br>\r\n<code>[1,1,2]</code>, <code>[1,2,1]</code>, and <code>[2,1,1]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/permutations/': '\n              <p></p><p>\r\nGiven a collection of numbers, return all possible permutations.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\n<code>[1,2,3]</code> have the following permutations:<br>\r\n<code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[2,1,3]</code>, <code>[2,3,1]</code>, <code>[3,1,2]</code>, and <code>[3,2,1]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/wildcard matching/': '\n              <p></p><p>Implement wildcard pattern matching with support for <code>&apos;?&apos;</code> and <code>&apos;*&apos;</code>.</p>\r\n\r\n<pre>\r\n&apos;?&apos; Matches any single character.\r\n&apos;*&apos; Matches any sequence of characters (including the empty sequence).\r\n\r\nThe matching should cover the <b>entire</b> input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(&quot;aa&quot;,&quot;a&quot;) &#x2192; false\r\nisMatch(&quot;aa&quot;,&quot;aa&quot;) &#x2192; true\r\nisMatch(&quot;aaa&quot;,&quot;aa&quot;) &#x2192; false\r\nisMatch(&quot;aa&quot;, &quot;*&quot;) &#x2192; true\r\nisMatch(&quot;aa&quot;, &quot;a*&quot;) &#x2192; true\r\nisMatch(&quot;ab&quot;, &quot;?*&quot;) &#x2192; true\r\nisMatch(&quot;aab&quot;, &quot;c*a*b&quot;) &#x2192; false\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/greedy/">Greedy</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/multiply strings/': '\n              <p></p><p>Given two numbers represented as strings, return multiplication of the numbers as a string.</p>\r\n\r\n<p>Note: The numbers can be arbitrarily large and are non-negative.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/combination sum ii/': '\n              <p></p><p>\r\nGiven a collection of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>.\r\n</p>\r\n\r\n<p>Each number in <b><i>C</i></b> may only be used <b>once</b> in the combination.\r\n</p>\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>All numbers (including target) will be positive integers.</li>\r\n<li>Elements in a combination (<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, &#x2026; , <i>a</i><sub>k</sub>) must be in non-descending order. (ie, <i>a</i><sub>1</sub> &#x2264; <i>a</i><sub>2</sub> &#x2264; &#x2026; &#x2264; <i>a</i><sub>k</sub>).</li>\r\n<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nFor example, given candidate set <code>10,1,2,7,6,1,5</code> and target <code>8</code>, <br>\r\nA solution set is: <br>\r\n<code>[1, 7]</code> <br>\r\n<code>[1, 2, 5]</code> <br>\r\n<code>[2, 6]</code> <br>\r\n<code>[1, 1, 6]</code> <br>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/first missing positive/': '\n              <p></p><p>\r\nGiven an unsorted integer array, find the first missing positive integer.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <code>[1,2,0]</code> return <code>3</code>,<br>\r\nand <code>[3,4,-1,1]</code> return <code>2</code>.\r\n</p>\r\n\r\n<p>\r\nYour algorithm should run in <i>O</i>(<i>n</i>) time and uses constant space.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/trapping rain water/': '\n              <p></p><p>\r\nGiven <i>n</i> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. \r\n</p>\r\n\r\n<p>\r\nFor example, <br>\r\nGiven <code>[0,1,0,2,1,0,1,3,2,1,2,1]</code>, return <code>6</code>.\r\n</p>\r\n\r\n<p>\r\n<img src="http://www.leetcode.com/wp-content/uploads/2012/08/rainwatertrap.png"><br>\r\n</p><p style="font-size: 11px">The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <b>Thanks Marcos</b> for contributing this image!</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/rotate image/': '\n              <p></p><p>You are given an <i>n</i> x <i>n</i> 2D matrix representing an image.</p>\r\n<p>Rotate the image by 90 degrees (clockwise).</p>\r\n<p>Follow up:<br>\r\nCould you do this in-place?</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/count and say/': '\n              <p></p><p>The count-and-say sequence is the sequence of integers beginning as follows:<br>\r\n<code>1, 11, 21, 1211, 111221, ...</code>\r\n</p>\r\n\r\n<p>\r\n<code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br>\r\n<code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br>\r\n<code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.<br>\r\n</p>\r\n\r\n<p>\r\nGiven an integer <i>n</i>, generate the <i>n</i><sup>th</sup> sequence.\r\n</p>\r\n\r\n<p>\r\nNote: The sequence of integers will be represented as a string.\r\n</p>\r\n<p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/combination sum/': '\n              <p></p><p>\r\nGiven a set of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>. \r\n</p>\r\n\r\n<p>The <b>same</b> repeated number may be chosen from <b><i>C</i></b> unlimited number of times.\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>All numbers (including target) will be positive integers.</li>\r\n<li>Elements in a combination (<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, &#x2026; , <i>a</i><sub>k</sub>) must be in non-descending order. (ie, <i>a</i><sub>1</sub> &#x2264; <i>a</i><sub>2</sub> &#x2264; &#x2026; &#x2264; <i>a</i><sub>k</sub>).</li>\r\n<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\nFor example, given candidate set <code>2,3,6,7</code> and target <code>7</code>, <br>\r\nA solution set is: <br>\r\n<code>[7]</code> <br>\r\n<code>[2, 2, 3]</code> <br>\r\n</p>\r\n<p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                </span>\n              \n            ',
    '/problems/sudoku solver/': '\n              <p></p><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\r\n\r\n<p>Empty cells are indicated by the character <code>&apos;.&apos;</code>.</p>\r\n\r\n<p>You may assume that there will be only one unique solution.\r\n\r\n</p><p>\r\n<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"><br>\r\n</p><p style="font-size: 11px">A sudoku puzzle...</p>\r\n<p></p>\r\n\r\n<p>\r\n<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png"><br>\r\n</p><p style="font-size: 11px">...and its solution numbers marked in red.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                </span>\n              \n            ',
    '/problems/valid sudoku/': '\n              <p></p><p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx">Sudoku Puzzles - The Rules</a>.</p>\r\n\r\n<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&apos;.&apos;</code>.</p>\r\n\r\n<p>\r\n<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"><br>\r\n</p><p style="font-size: 11px">A partially filled sudoku which is valid.</p>\r\n<p></p>\r\n\r\n<p><b>Note:</b><br>\r\nA valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                </span>\n              \n            ',
    '/problems/search for a range/': '\n              <p></p><p>Given a sorted array of integers, find the starting and ending position of a given target value.</p>\r\n\r\n<p>Your algorithm&apos;s runtime complexity must be in the order of <i>O</i>(log <i>n</i>).</p>\r\n\r\n<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <code>[5, 7, 7, 8, 8, 10]</code> and target value 8,<br>\r\nreturn <code>[3, 4]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/substring with concatenation of all words/': '\n              <p></p><p>\r\nYou are given a string, <b>S</b>, and a list of words, <b>L</b>, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.\r\n</p>\r\n\r\n<p>\r\nFor example, given:<br>\r\n<b>S</b>: <code>&quot;barfoothefoobarman&quot;</code><br>\r\n<b>L</b>: <code>[&quot;foo&quot;, &quot;bar&quot;]</code>\r\n</p>\r\n\r\n<p>\r\nYou should return the indices: <code>[0,9]</code>.<br>\r\n(order does not matter).\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/longest valid parentheses/': '\n              <p></p><p>Given a string containing just the characters <code>&apos;(&apos;</code> and <code>&apos;)&apos;</code>, find the length of the longest valid (well-formed) parentheses substring.\r\n</p>\r\n<p>\r\nFor <code>&quot;(()&quot;</code>, the longest valid parentheses substring is <code>&quot;()&quot;</code>, which has length = 2.\r\n</p>\r\n<p>\r\nAnother example is <code>&quot;)()())&quot;</code>, where the longest valid parentheses substring is <code>&quot;()()&quot;</code>, which has length = 4.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/search in rotated sorted array/': '\n              <p></p><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/search insert position/': '\n              <p></p><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\r\n\r\n<p>You may assume no duplicates in the array.</p>\r\n\r\n<p>\r\nHere are few examples.<br>\r\n<code>[1,3,5,6]</code>, 5 &#x2192; 2<br>\r\n<code>[1,3,5,6]</code>, 2 &#x2192; 1<br>\r\n<code>[1,3,5,6]</code>, 7 &#x2192; 4<br>\r\n<code>[1,3,5,6]</code>, 0 &#x2192; 0\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/divide two integers/': '\n              <p></p><p>\r\nDivide two integers without using multiplication, division and mod operator.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/next permutation/': '\n              <p></p><p>\r\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\r\n</p>\r\n<p>\r\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\r\n</p>\r\n<p>\r\nThe replacement must be in-place, do not allocate extra memory.\r\n</p>\r\n<p>\r\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br>\r\n<code>1,2,3</code> &#x2192; <code>1,3,2</code><br>\r\n<code>3,2,1</code> &#x2192; <code>1,2,3</code><br>\r\n<code>1,1,5</code> &#x2192; <code>1,5,1</code><br>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                </span>\n              \n            ',
    '/problems/implement strstr/': '\n              <p></p><p>\r\nImplement strStr().\r\n</p>\r\n<p>\r\nReturns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\r\n</p>\r\n<p>\r\n<b><font color="red">Update (2014-11-02):</font></b><br>\r\nThe signature of the function had been updated to return the <i>index</i> instead of the pointer. If you still see your function signature returns a <code>char *</code> or <code>String</code>, please click the reload button <span class="glyphicon glyphicon-refresh"></span> to reset your code definition.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/reverse nodes in k group/': '\n              <p></p><p>\r\nGiven a linked list, reverse the nodes of a linked list <i>k</i> at a time and return its modified list.\r\n</p>\r\n\r\n<p>\r\nIf the number of nodes is not a multiple of <i>k</i> then left-out nodes in the end should remain as it is.</p>\r\n\r\n<p>You may not alter the values in the nodes, only nodes itself may be changed.</p>\r\n\r\n<p>Only constant memory is allowed.</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>\r\n</p>\r\n\r\n<p>\r\nFor <i>k</i> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code>\r\n</p>\r\n\r\n<p>\r\nFor <i>k</i> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove element/': '\n              <p></p><p>Given an array and a value, remove all instances of that value in place and return the new length.\r\n</p>\r\n\r\n<p>\r\nThe order of elements can be changed. It doesn&apos;t matter what you leave beyond the new length.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove duplicates from sorted array/': '\n              <p></p><p>\r\nGiven a sorted array, remove the duplicates in place such that each element appear only <i>once</i> and return the new length.</p>\r\n\r\n<p>\r\nDo not allocate extra space for another array, you must do this in place with constant memory.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven input array A = <code>[1,1,2]</code>,\r\n</p>\r\n<p>\r\nYour function should return length = <code>2</code>, and A is now <code>[1,2]</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/generate parentheses/': '\n              <p></p><p>\r\nGiven <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n</p>\r\n\r\n<p>\r\nFor example, given <i>n</i> = 3, a solution set is:\r\n</p>\r\n<p>\r\n<code>&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;</code>\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/swap nodes in pairs/': '\n              <p></p><p>\r\nGiven a linked list, swap every two adjacent nodes and return its head.\r\n</p>\r\n\r\n<p>\r\nFor example,<br>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\r\n</p>\r\n\r\n<p>\r\nYour algorithm should use only constant space. You may <b>not</b> modify the values in the list, only nodes itself can be changed.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                </span>\n              \n            ',
    '/problems/merge k sorted lists/': '\n              <p></p><p>\r\nMerge <i>k</i> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/divide-and-conquer/">Divide and Conquer</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/heap/">Heap</a>\n                  \n                </span>\n              \n            ',
    '/problems/valid parentheses/': '\n              <p></p><p>Given a string containing just the characters <code>&apos;(&apos;</code>, <code>&apos;)&apos;</code>, <code>&apos;{&apos;</code>, <code>&apos;}&apos;</code>, <code>&apos;[&apos;</code> and <code>&apos;]&apos;</code>, determine if the input string is valid.</p>\r\n\r\n<p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p>\r\n<p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/stack/">Stack</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/letter combinations of a phone number/': '\n              <p></p><p>Given a digit string, return all possible letter combinations that the number could represent.\r\n</p>\r\n\r\n<p>\r\nA mapping of digit to letters (just like on the telephone buttons) is given below.</p>\r\n<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png"></p>\r\n\r\n<pre>\r\n<b>Input:</b>Digit string &quot;23&quot;\r\n<b>Output:</b> [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\r\n</pre>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/4sum/': '\n              <p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i>, and <i>d</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> + <i>d</i> = target? Find all unique quadruplets in the array which gives the sum of target.</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>Elements in a quadruplet (<i>a</i>,<i>b</i>,<i>c</i>,<i>d</i>) must be in non-descending order. (ie, <i>a</i> &#x2264; <i>b</i> &#x2264; <i>c</i> &#x2264; <i>d</i>)</li>\r\n<li>The solution set must not contain duplicate quadruplets.</li>\r\n</ul>\r\n</p>\r\n\r\n<pre>\r\n    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.\r\n\r\n    A solution set is:\r\n    (-1,  0, 0, 1)\r\n    (-2, -1, 1, 2)\r\n    (-2,  0, 0, 2)\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/longest common prefix/': '\n              <p></p><p>Write a function to find the longest common prefix string amongst an array of strings.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/remove nth node from end of list/': '\n              <p></p><p>Given a linked list, remove the <i>n</i><sup>th</sup> node from the end of list and return its head.</p>\r\n\r\n<p>\r\nFor example,</p>\r\n\r\n<pre>\r\n   Given linked list: <b>1-&gt;2-&gt;3-&gt;4-&gt;5</b>, and <b><i>n</i> = 2</b>.\r\n\r\n   After removing the second node from the end, the linked list becomes <b>1-&gt;2-&gt;3-&gt;5</b>.\r\n</pre>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nGiven <i>n</i> will always be valid.<br>\r\nTry to do this in one pass.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/3sum closest/': '\n              <p></p><p>Given an array <i>S</i> of <i>n</i> integers, find three integers in <i>S</i> such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\r\n\r\n<pre>\r\n    For example, given array S = {-1 2 1 -4}, and target = 1.\r\n\r\n    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/3sum/': '\n              <p></p><p>Given an array <i>S</i> of <i>n</i> integers, are there elements <i>a</i>, <i>b</i>, <i>c</i> in <i>S</i> such that <i>a</i> + <i>b</i> + <i>c</i> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ul>\r\n<li>Elements in a triplet (<i>a</i>,<i>b</i>,<i>c</i>) must be in non-descending order. (ie, <i>a</i> &#x2264; <i>b</i> &#x2264; <i>c</i>)</li>\r\n<li>The solution set must not contain duplicate triplets.</li>\r\n</ul>\r\n</p>\r\n\r\n<pre>\r\n    For example, given array S = {-1 0 1 2 -1 -4},\r\n\r\n    A solution set is:\r\n    (-1, 0, 1)\r\n    (-1, -1, 2)\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/integer to roman/': '\n              <p></p><p>Given an integer, convert it to a roman numeral.\r\n</p>\r\n\r\n<p>Input is guaranteed to be within the range from 1 to 3999.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/roman to integer/': '\n              <p></p><p>Given a roman numeral, convert it to an integer.</p>\r\n\r\n<p>Input is guaranteed to be within the range from 1 to 3999.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/regular expression matching/': '\n              <p></p><p>Implement regular expression matching with support for <code>&apos;.&apos;</code> and <code>&apos;*&apos;</code>.</p>\r\n\r\n<pre>\r\n&apos;.&apos; Matches any single character.\r\n&apos;*&apos; Matches zero or more of the preceding element.\r\n\r\nThe matching should cover the <b>entire</b> input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(&quot;aa&quot;,&quot;a&quot;) &#x2192; false\r\nisMatch(&quot;aa&quot;,&quot;aa&quot;) &#x2192; true\r\nisMatch(&quot;aaa&quot;,&quot;aa&quot;) &#x2192; false\r\nisMatch(&quot;aa&quot;, &quot;a*&quot;) &#x2192; true\r\nisMatch(&quot;aa&quot;, &quot;.*&quot;) &#x2192; true\r\nisMatch(&quot;ab&quot;, &quot;.*&quot;) &#x2192; true\r\nisMatch(&quot;aab&quot;, &quot;c*a*b&quot;) &#x2192; true\r\n</pre><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/backtracking/">Backtracking</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/palindrome number/': '\n              <p></p><p>Determine whether an integer is a palindrome. Do this without extra space.</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show spoilers.</a></p>\r\n\r\n<div class="spoilers"><b>Some hints:</b>\r\n\r\n<p>Could negative integers be palindromes? (ie, -1)</p>\r\n\r\n<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>\r\n\r\n<p>You could also try reversing an integer. However, if you have solved the problem &quot;Reverse Integer&quot;, you know that the reversed integer might overflow. How would you handle such case?</p>\r\n\r\n<p>There is a more generic way of solving this problem.</p>\r\n\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/string to integer atoi/': '\n              <p></p><p>Implement <span style="font-family:monospace">atoi</span> to convert a string to an integer.</p>\r\n\r\n<p><b>Hint:</b> Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>\r\n\r\n<p>\r\n<b>Notes:</b> \r\nIt is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front. </p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">spoilers alert... click to show requirements for atoi.</a></p>\r\n\r\n<div class="spoilers"><b>Requirements for atoi:</b>\r\n\r\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\r\n\r\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\r\n\r\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\r\n\r\n<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.\r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/container with most water/': '\n              <p></p><p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\r\n</p>\r\n<p>Note: You may not slant the container.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                </span>\n              \n            ',
    '/problems/reverse integer/': '\n              <p></p><p>Reverse digits of an integer.</p>\r\n\r\n<p style="font-family:monospace">\r\n<b>Example1:</b> x =  123, return  321<br>\r\n<b>Example2:</b> x = -123, return -321\r\n</p>\r\n\r\n<p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show spoilers.</a></p>\r\n\r\n<div class="spoilers"><b>Have you thought about this?</b>\r\n\r\n<p>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>\r\n\r\n<p>If the integer&apos;s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>\r\n\r\n<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>\r\n\r\n<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n\r\n<p>\r\n<b><font color="red">Update (2014-11-10):</font></b><br>\r\nTest cases had been added to test the overflow behavior.\r\n</p>\r\n</div><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/zigzag conversion/': '\n              <p></p><p>\r\nThe string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\nAnd then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>\r\nWrite the code that will take a string and make this conversion given a number of rows:\r\n\r\n<pre>string convert(string text, int nRows);</pre>\r\n\r\n<code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/add two numbers/': '\n              <p></p><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n<p style="font-family:monospace">\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/linked-list/">Linked List</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/math/">Math</a>\n                  \n                </span>\n              \n            ',
    '/problems/longest palindromic substring/': '\n              <p></p><p>Given a string <i>S</i>, find the longest palindromic substring in <i>S</i>. You may assume that the maximum length of <i>S</i> is 1000, and there exists one unique longest palindromic substring.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ',
    '/problems/median of two sorted arrays/': '\n              <p></p><p>There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/divide-and-conquer/">Divide and Conquer</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/binary-search/">Binary Search</a>\n                  \n                </span>\n              \n            ',
    '/problems/2sum/': '\n              <p></p><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p>\r\n\r\n<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>\r\n\r\n<p>You may assume that each input would have exactly one solution.</p>\r\n\r\n<p style="font-family:monospace">\r\n<b>Input:</b> numbers={2, 7, 11, 15}, target=9<br>\r\n<b>Output:</b> index1=1, index2=2\r\n</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                </span>\n              \n            ',
    '/problems/longest substring without repeating characters/': '\n              <p></p><p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for &quot;abcabcbb&quot; is &quot;abc&quot;, which the length is 3. For &quot;bbbbb&quot; the longest substring is &quot;b&quot;, with the length of 1.</p><p></p>\n              \n                <div id="tags" class="btn btn-xs btn-warning">Show Tags</div>\n                <span class="hide">\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/hash-table/">Hash Table</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/two-pointers/">Two Pointers</a>\n                  \n                  <a class="btn btn-xs btn-primary" href="/tag/string/">String</a>\n                  \n                </span>\n              \n            ' }

}